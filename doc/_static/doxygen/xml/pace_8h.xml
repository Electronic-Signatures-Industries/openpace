<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="pace_8h" kind="file">
    <compoundname>pace.h</compoundname>
    <includes refid="eac_8h" local="yes">eac.h</includes>
    <includes local="no">openssl/bn.h</includes>
    <includes local="no">openssl/buffer.h</includes>
    <incdepgraph>
      <node id="50">
        <label>eac/pace.h</label>
        <link refid="pace.h"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>openssl/asn1t.h</label>
      </node>
      <node id="54">
        <label>openssl/obj_mac.h</label>
      </node>
      <node id="55">
        <label>openssl/asn1.h</label>
      </node>
      <node id="53">
        <label>eac/objects.h</label>
        <link refid="objects_8h"/>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>openssl/bio.h</label>
      </node>
      <node id="52">
        <label>eac/cv_cert.h</label>
        <link refid="cv__cert_8h"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>openssl/buffer.h</label>
      </node>
      <node id="51">
        <label>eac.h</label>
        <link refid="eac_8h"/>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>openssl/evp.h</label>
      </node>
      <node id="60">
        <label>openssl/ec.h</label>
      </node>
      <node id="59">
        <label>openssl/cmac.h</label>
      </node>
      <node id="62">
        <label>openssl/bn.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structpace__sec" prot="public">pace_sec</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="pace_8h_1a02b29cbcf45cfaa2e6df0f59b98b3525" prot="public" static="no">
        <name>s_type</name>
        <enumvalue id="pace_8h_1a02b29cbcf45cfaa2e6df0f59b98b3525a1c7152d3c1a0b7e8543cbf176e38d8f2" prot="public">
          <name>PACE_MRZ</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>MRZ is the Machine Readable Zone, printed on the card, encoding the personal information of the user. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pace_8h_1a02b29cbcf45cfaa2e6df0f59b98b3525afbbe0ce2ae202cc1837422a10ce487a1" prot="public">
          <name>PACE_CAN</name>
          <briefdescription>
<para>CAN is the Card access number printed on the card. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pace_8h_1a02b29cbcf45cfaa2e6df0f59b98b3525aaf59d2b47ca6bd89c0db0579bc2ede28" prot="public">
          <name>PACE_PIN</name>
          <briefdescription>
<para>PIN is the Personal Identification Number, a secret known only to the user and not printed on the card. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pace_8h_1a02b29cbcf45cfaa2e6df0f59b98b3525a4416853caf39bcbb2a967ba2558d3805" prot="public">
          <name>PACE_PUK</name>
          <briefdescription>
<para>PUK is the Personal Unblocking key. This type of secret is used when the card is suspended due to too many incorrect PACE runs. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pace_8h_1a02b29cbcf45cfaa2e6df0f59b98b3525abc55b260a6cc5bdcea0fd496cb847fc4" prot="public">
          <name>PACE_RAW</name>
          <briefdescription>
<para>This type of secret is not defined in BSI TR-03110. We use it as a generic type, so we can use PACE independent from a ID card. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pace_8h_1a02b29cbcf45cfaa2e6df0f59b98b3525aa771208f20a5aacab35ddb611ecac21b" prot="public">
          <name>PACE_SEC_UNDEF</name>
          <briefdescription>
<para>Undefined type, if nothing else matches. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Type of the secret. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/pace.h" line="49" column="1" bodyfile="/home/fm/Dokumente/openpace/src/eac/pace.h" bodystart="49" bodyend="66"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="pace_8h_1a4077e81a0fc6bf763716d0a578e7f46f" prot="public" static="no">
        <type>struct <ref refid="structpace__sec" kindref="compound">pace_sec</ref></type>
        <definition>typedef struct pace_sec  PACE_SEC</definition>
        <argsstring></argsstring>
        <name>PACE_SEC</name>
        <briefdescription>
<para>Shared secret for PACE. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/pace.h" line="76" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__management_1ga434cf93529804c711640461a3930f576" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PACE_SEC_clear_free</definition>
        <argsstring>(PACE_SEC *s)</argsstring>
        <name>PACE_SEC_clear_free</name>
        <param>
          <type><ref refid="pace_8h_1a4077e81a0fc6bf763716d0a578e7f46f" kindref="member">PACE_SEC</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Free a PACE secret. </para>        </briefdescription>
        <detaileddescription>
<para>Sensitive memory is cleared with OPENSSL_cleanse().</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) Object to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/pace.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__management_1gae35799ea82f5af5420ed100da61fde71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="pace_8h_1a4077e81a0fc6bf763716d0a578e7f46f" kindref="member">PACE_SEC</ref> *</type>
        <definition>PACE_SEC* PACE_SEC_new</definition>
        <argsstring>(const char *sec, size_t sec_len, enum s_type type)</argsstring>
        <name>PACE_SEC_new</name>
        <param>
          <type>const char *</type>
          <declname>sec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sec_len</declname>
        </param>
        <param>
          <type>enum <ref refid="pace_8h_1a02b29cbcf45cfaa2e6df0f59b98b3525" kindref="member">s_type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Create and initialize a new PACE secret. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sec</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw secret </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sec_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of <emphasis>sec</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of secret</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New PACE secret or NULL in case of an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/pace.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__management_1ga7a3bae35256a5d00c765d4bc60e2c833" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int PACE_SEC_print_private</definition>
        <argsstring>(BIO *out, const PACE_SEC *sec, int indent)</argsstring>
        <name>PACE_SEC_print_private</name>
        <param>
          <type>BIO *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="pace_8h_1a4077e81a0fc6bf763716d0a578e7f46f" kindref="member">PACE_SEC</ref> *</type>
          <declname>sec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indent</declname>
        </param>
        <briefdescription>
<para>Print PACE_SEC object including private secret. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">out</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to print the data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sec</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context to be printed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">indent</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of whitespaces used for indenting the output</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success or 0 in case of an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/pace.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__paceproto_1ga275e2d1f7e8cd77f2448ad4fbd09984f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BUF_MEM *</type>
        <definition>BUF_MEM* PACE_STEP1_enc_nonce</definition>
        <argsstring>(const EAC_CTX *ctx, const PACE_SEC *pi)</argsstring>
        <name>PACE_STEP1_enc_nonce</name>
        <param>
          <type>const <ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="pace_8h_1a4077e81a0fc6bf763716d0a578e7f46f" kindref="member">PACE_SEC</ref> *</type>
          <declname>pi</declname>
        </param>
        <briefdescription>
<para>Generates and encrypts a nonce. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context. The nonce is saved in <emphasis>ctx</emphasis>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pi</parametername>
</parameternamelist>
<parameterdescription>
<para>Shared secret for PACE</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the encrypted nonce on success or NULL in case of an error</para></simplesect>
<simplesect kind="see"><para><ulink url="http://frankmorgner.github.io/openpace/protocols.html#protocol-specification">PACE&apos;s Protocol Specification</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/pace.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__paceproto_1gaa46fbd637f3bf063b5c68f37d40efba3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int PACE_STEP2_dec_nonce</definition>
        <argsstring>(const EAC_CTX *ctx, const PACE_SEC *pi, const BUF_MEM *enc_nonce)</argsstring>
        <name>PACE_STEP2_dec_nonce</name>
        <param>
          <type>const <ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="pace_8h_1a4077e81a0fc6bf763716d0a578e7f46f" kindref="member">PACE_SEC</ref> *</type>
          <declname>pi</declname>
        </param>
        <param>
          <type>const BUF_MEM *</type>
          <declname>enc_nonce</declname>
        </param>
        <briefdescription>
<para>Decrypt the nonce from the other party. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context The decrypted nonce is saved in <emphasis>ctx</emphasis>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pi</parametername>
</parameternamelist>
<parameterdescription>
<para>Shared secret for PACE </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enc_nonce</parametername>
</parameternamelist>
<parameterdescription>
<para>Encrypted nonce from the other party</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success or 0 in case of an error</para></simplesect>
<simplesect kind="see"><para><ulink url="http://frankmorgner.github.io/openpace/protocols.html#protocol-specification">PACE&apos;s Protocol Specification</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/pace.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__paceproto_1gafd890198805ed2591f172e7815b8a2df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BUF_MEM *</type>
        <definition>BUF_MEM* PACE_STEP3A_generate_mapping_data</definition>
        <argsstring>(const EAC_CTX *ctx)</argsstring>
        <name>PACE_STEP3A_generate_mapping_data</name>
        <param>
          <type>const <ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Generate a mapping data to perform the mapping to ephemeral domain parameters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mapping data to be transmitted to the other party or NULL in case of an error</para></simplesect>
<simplesect kind="see"><para><ulink url="http://frankmorgner.github.io/openpace/protocols.html#protocol-specification">PACE&apos;s Protocol Specification</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/pace.h" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__paceproto_1ga56c295adbcbca57a6059c04a480d9ff7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int PACE_STEP3A_map_generator</definition>
        <argsstring>(const EAC_CTX *ctx, const BUF_MEM *in)</argsstring>
        <name>PACE_STEP3A_map_generator</name>
        <param>
          <type>const <ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const BUF_MEM *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Map to the ephemeral domain parameters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in</parametername>
</parameternamelist>
<parameterdescription>
<para>Mapping data from the other party</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success or 0 in case of an error</para></simplesect>
<simplesect kind="see"><para><ulink url="http://frankmorgner.github.io/openpace/protocols.html#protocol-specification">PACE&apos;s Protocol Specification</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/pace.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__paceproto_1gafcb6f32a13e38cb23a82e33faa817179" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BUF_MEM *</type>
        <definition>BUF_MEM* PACE_STEP3B_generate_ephemeral_key</definition>
        <argsstring>(EAC_CTX *ctx)</argsstring>
        <name>PACE_STEP3B_generate_ephemeral_key</name>
        <param>
          <type><ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Generate a keypair for key agreement. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Public key or NULL in case of an error</para></simplesect>
<simplesect kind="see"><para><ulink url="http://frankmorgner.github.io/openpace/protocols.html#protocol-specification">PACE&apos;s Protocol Specification</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/pace.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__paceproto_1gaee1105d7cbd1fe8629157a3b97f25c52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int PACE_STEP3B_compute_shared_secret</definition>
        <argsstring>(const EAC_CTX *ctx, const BUF_MEM *in)</argsstring>
        <name>PACE_STEP3B_compute_shared_secret</name>
        <param>
          <type>const <ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const BUF_MEM *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Compute the shared secret for key agreement. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context. The secret is saved in <emphasis>ctx</emphasis>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in</parametername>
</parameternamelist>
<parameterdescription>
<para>Public key from the other party</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success 0 in case of an error</para></simplesect>
<simplesect kind="see"><para><ulink url="http://frankmorgner.github.io/openpace/protocols.html#protocol-specification">PACE&apos;s Protocol Specification</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/pace.h" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__paceproto_1gae3a44c7269e95f48874dd909ed34ba77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int PACE_STEP3C_derive_keys</definition>
        <argsstring>(const EAC_CTX *ctx)</argsstring>
        <name>PACE_STEP3C_derive_keys</name>
        <param>
          <type>const <ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Derives encryption and authentication keys. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context. The keys are saved in <emphasis>ctx</emphasis>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success or 0 in case of an error</para></simplesect>
<simplesect kind="see"><para><ulink url="http://frankmorgner.github.io/openpace/protocols.html#protocol-specification">PACE&apos;s Protocol Specification</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/pace.h" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__paceproto_1gaf682c5881e60755ef23e4e583e4d7cdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BUF_MEM *</type>
        <definition>BUF_MEM* PACE_STEP3D_compute_authentication_token</definition>
        <argsstring>(const EAC_CTX *ctx, const BUF_MEM *pub)</argsstring>
        <name>PACE_STEP3D_compute_authentication_token</name>
        <param>
          <type>const <ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const BUF_MEM *</type>
          <declname>pub</declname>
        </param>
        <briefdescription>
<para>Compute the authentication token from domain parameters and public key. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pub</parametername>
</parameternamelist>
<parameterdescription>
<para>Public key from the other party (generated in PACE step 3b)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Authentication token or NULL in case of error</para></simplesect>
<simplesect kind="see"><para><ulink url="http://frankmorgner.github.io/openpace/protocols.html#protocol-specification">PACE&apos;s Protocol Specification</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/pace.h" line="213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__paceproto_1ga424f7f098e8377ea602c4f5233a04f3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int PACE_STEP3D_verify_authentication_token</definition>
        <argsstring>(const EAC_CTX *ctx, const BUF_MEM *token)</argsstring>
        <name>PACE_STEP3D_verify_authentication_token</name>
        <param>
          <type>const <ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const BUF_MEM *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Verifies an authentication token. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">token</parametername>
</parameternamelist>
<parameterdescription>
<para>Authentication token from the other party</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the token has been verified as correct, 0 if not or -1 in case of an error occurred.</para></simplesect>
<simplesect kind="see"><para><ulink url="http://frankmorgner.github.io/openpace/protocols.html#protocol-specification">PACE&apos;s Protocol Specification</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/pace.h" line="226" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Interface for Password Authenticated Connection Establishment. </para>    </briefdescription>
    <detaileddescription>
<para>PACE is a protocol used to establish strong session keys based on a weak shared secret (password). The result of a PACE run are two symmetric keys, one for MAC computation and one for encryption. It was specified for Extended Access Control (EAC) in Machine Readable Travel Documents (MRTD), but can also be used for securing any other communication channel. PACE can be used with different suites of algorithms and is not subject to any patents.</para><para><simplesect kind="author"><para>Frank Morgner <ulink url="mailto:frankmorgner@gmail.com">frankmorgner@gmail.com</ulink> </para></simplesect>
<simplesect kind="author"><para>Dominik Oepen <ulink url="mailto:oepen@informatik.hu-berlin.de">oepen@informatik.hu-berlin.de</ulink> </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2010-2012<sp/>Frank<sp/>Morgner<sp/>and<sp/>Dominik<sp/>Oepen</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>OpenPACE.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>OpenPACE<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it<sp/>under</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>OpenPACE<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but<sp/>WITHOUT<sp/>ANY</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>details.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>along<sp/>with</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>OpenPACE.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor">#ifndef<sp/>PACE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PACE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="eac_8h" kindref="compound">eac.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/bn.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/buffer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="pace_8h_1a02b29cbcf45cfaa2e6df0f59b98b3525" refkind="member"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="pace_8h_1a02b29cbcf45cfaa2e6df0f59b98b3525" kindref="member">s_type</ref><sp/>{</highlight></codeline>
<codeline lineno="52" refid="pace_8h_1a02b29cbcf45cfaa2e6df0f59b98b3525a1c7152d3c1a0b7e8543cbf176e38d8f2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pace_8h_1a02b29cbcf45cfaa2e6df0f59b98b3525a1c7152d3c1a0b7e8543cbf176e38d8f2" kindref="member">PACE_MRZ</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="54" refid="pace_8h_1a02b29cbcf45cfaa2e6df0f59b98b3525afbbe0ce2ae202cc1837422a10ce487a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pace_8h_1a02b29cbcf45cfaa2e6df0f59b98b3525afbbe0ce2ae202cc1837422a10ce487a1" kindref="member">PACE_CAN</ref>,</highlight></codeline>
<codeline lineno="57" refid="pace_8h_1a02b29cbcf45cfaa2e6df0f59b98b3525aaf59d2b47ca6bd89c0db0579bc2ede28" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pace_8h_1a02b29cbcf45cfaa2e6df0f59b98b3525aaf59d2b47ca6bd89c0db0579bc2ede28" kindref="member">PACE_PIN</ref>,</highlight></codeline>
<codeline lineno="60" refid="pace_8h_1a02b29cbcf45cfaa2e6df0f59b98b3525a4416853caf39bcbb2a967ba2558d3805" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pace_8h_1a02b29cbcf45cfaa2e6df0f59b98b3525a4416853caf39bcbb2a967ba2558d3805" kindref="member">PACE_PUK</ref>,</highlight></codeline>
<codeline lineno="63" refid="pace_8h_1a02b29cbcf45cfaa2e6df0f59b98b3525abc55b260a6cc5bdcea0fd496cb847fc4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pace_8h_1a02b29cbcf45cfaa2e6df0f59b98b3525abc55b260a6cc5bdcea0fd496cb847fc4" kindref="member">PACE_RAW</ref>,</highlight></codeline>
<codeline lineno="65" refid="pace_8h_1a02b29cbcf45cfaa2e6df0f59b98b3525aa771208f20a5aacab35ddb611ecac21b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pace_8h_1a02b29cbcf45cfaa2e6df0f59b98b3525aa771208f20a5aacab35ddb611ecac21b" kindref="member">PACE_SEC_UNDEF</ref></highlight></codeline>
<codeline lineno="66"><highlight class="normal">};</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="structpace__sec" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpace__sec" kindref="compound">pace_sec</ref><sp/>{</highlight></codeline>
<codeline lineno="71" refid="structpace__sec_1a4edee42cfb3cbaa2ca7a0612e5bfd70a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="pace_8h_1a02b29cbcf45cfaa2e6df0f59b98b3525" kindref="member">s_type</ref><sp/><ref refid="structpace__sec_1a4edee42cfb3cbaa2ca7a0612e5bfd70a" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="73" refid="structpace__sec_1a0f6398c39c804664105a8b9595618894" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>BUF_MEM<sp/>*<ref refid="structpace__sec_1a0f6398c39c804664105a8b9595618894" kindref="member">mem</ref>;</highlight></codeline>
<codeline lineno="75" refid="structpace__sec_1ab10cebaa4080f060c6e2be702129a2bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>BUF_MEM<sp/>*<ref refid="structpace__sec_1ab10cebaa4080f060c6e2be702129a2bf" kindref="member">encoded</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}<sp/><ref refid="pace_8h_1a4077e81a0fc6bf763716d0a578e7f46f" kindref="member">PACE_SEC</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__management_1ga434cf93529804c711640461a3930f576" kindref="member">PACE_SEC_clear_free</ref>(<ref refid="structpace__sec" kindref="compound">PACE_SEC</ref><sp/>*<sp/>s);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><ref refid="structpace__sec" kindref="compound">PACE_SEC</ref><sp/>*</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><ref refid="group__management_1gae35799ea82f5af5420ed100da61fde71" kindref="member">PACE_SEC_new</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sec_len,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="pace_8h_1a02b29cbcf45cfaa2e6df0f59b98b3525" kindref="member">s_type</ref><sp/>type);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><ref refid="group__management_1ga7a3bae35256a5d00c765d4bc60e2c833" kindref="member">PACE_SEC_print_private</ref>(BIO<sp/>*out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpace__sec" kindref="compound">PACE_SEC</ref><sp/>*sec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent);</highlight></codeline>
<codeline lineno="131"><highlight class="normal">BUF_MEM<sp/>*<sp/><ref refid="group__paceproto_1ga275e2d1f7e8cd77f2448ad4fbd09984f" kindref="member">PACE_STEP1_enc_nonce</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*<sp/>ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpace__sec" kindref="compound">PACE_SEC</ref><sp/>*<sp/>pi);</highlight></codeline>
<codeline lineno="143"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__paceproto_1gaa46fbd637f3bf063b5c68f37d40efba3" kindref="member">PACE_STEP2_dec_nonce</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*<sp/>ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpace__sec" kindref="compound">PACE_SEC</ref><sp/>*<sp/>pi,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BUF_MEM<sp/>*<sp/>enc_nonce);</highlight></codeline>
<codeline lineno="156"><highlight class="normal">BUF_MEM<sp/>*</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><ref refid="group__paceproto_1gafd890198805ed2591f172e7815b8a2df" kindref="member">PACE_STEP3A_generate_mapping_data</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*<sp/>ctx);</highlight></codeline>
<codeline lineno="168"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><ref refid="group__paceproto_1ga56c295adbcbca57a6059c04a480d9ff7" kindref="member">PACE_STEP3A_map_generator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*<sp/>ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BUF_MEM<sp/>*<sp/>in);</highlight></codeline>
<codeline lineno="179"><highlight class="normal">BUF_MEM<sp/>*<sp/><ref refid="group__paceproto_1gafcb6f32a13e38cb23a82e33faa817179" kindref="member">PACE_STEP3B_generate_ephemeral_key</ref>(<ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*<sp/>ctx);</highlight></codeline>
<codeline lineno="190"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><ref refid="group__paceproto_1gaee1105d7cbd1fe8629157a3b97f25c52" kindref="member">PACE_STEP3B_compute_shared_secret</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*<sp/>ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BUF_MEM<sp/>*<sp/>in);</highlight></codeline>
<codeline lineno="201"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__paceproto_1gae3a44c7269e95f48874dd909ed34ba77" kindref="member">PACE_STEP3C_derive_keys</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="213"><highlight class="normal">BUF_MEM<sp/>*<sp/><ref refid="group__paceproto_1gaf682c5881e60755ef23e4e583e4d7cdd" kindref="member">PACE_STEP3D_compute_authentication_token</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BUF_MEM<sp/>*pub);</highlight></codeline>
<codeline lineno="226"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__paceproto_1ga424f7f098e8377ea602c4f5233a04f3d" kindref="member">PACE_STEP3D_verify_authentication_token</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*<sp/>ctx,</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BUF_MEM<sp/>*<sp/>token);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="preprocessor">#ifdef<sp/><sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/fm/Dokumente/openpace/src/eac/pace.h"/>
  </compounddef>
</doxygen>
