.. highlight:: sh

.. |PACE| replace:: :abbr:`PACE (Password Authenticated Connection Establishment)`
.. |TA| replace:: :abbr:`TA (Terminal Authenticatation)`
.. |CA| replace:: :abbr:`CA (Chip Authentication)`
.. |EAC| replace:: :abbr:`EAC (Extended Access Control)`
.. |CVCA| replace:: :abbr:`CSCA (Country Verifying Certificate Authority)`
.. |CSCA| replace:: :abbr:`CSCA (Country Signing Certificate Authority)`

###############################################################################
Welcome to @PACKAGE_NAME@'s documentation!
###############################################################################

.. sidebar:: Summary

    @PACKAGE_SUMMARY@

    :Authors:
        - `Frank Morgner <morgner@informatik.hu-berlin.de>`_
        - `Dominik Oepen <oepen@informatik.hu-berlin.de>`_
    :License:
        GPL version 3
    :Tested Platforms:
        - Windows
        - Linux (Debian, Ubuntu, SUSE, OpenMoko)
        - Mac OS
        - Solaris
        - Android

OpenPACE implements Extended Access Control (EAC) version 2 as specified in
`BSI TR-03110`_. OpenPACE comprises support for the following protocols:

:Password Authenticated Connection Establishment (PACE):
    Establish a secure channel with a strong key between two parties that only
    share a weak secret.
:Terminal Authentication (TA):
    Verify/prove the terminal's certificate (or rather certificate chain) and
    secret key.
:Chip Authentication (CA):
    Establish a secure channel based on the chip's static key pair proving its
    authenticy.

Furthermore, OpenPACE also supports Card Verifiable Certificates (CV
Certificates) as well as easy to use wrappers for using the established secure
channels.

The handlers for looking up trust anchors during |TA| and |CA| (i.e. the |CVCA|
and the |CSCA| certificates) can be customized. By default, the appropriate
certificates will be looked up in the file system.

OpenPACE supports all variants of |PACE| (DH/ECDH, GM/IM), |TA|
(RSASSA-PKCS1-v1_5/RSASSA-PSS/ECDSA), |CA| (DH/ECDH) and all standardized
domain parameters (GFP/ECP).

.. note::
    OpenPACE only implements the cryptographic protocols of the |EAC|. If you
    actually want to exchange data with a smart card, you need to take care of
    formatting and sending the data in the form of APDUs. If this is what
    you're trying to do, you should have a look at the :command:`npa-tool` of
    the `nPA Smart Card Library`_.
   

OpenPACE is implemented as C-library and comes with native language wrappers
for:

- Java
- Python
- Ruby
- Go


*******************************************************************************
Download @PACKAGE_NAME@
*******************************************************************************

You can find the latest release of @PACKAGE_NAME@ on `Sourceforge
<http://sourceforge.net/projects/openpace/>`_.

Alternatively, you can clone our git repository::

    git clone git://git.code.sf.net/p/openpace/git openpace


*******************************************************************************
Install @PACKAGE_NAME@
*******************************************************************************

@PACKAGE_NAME@ uses the GNU Build System to compile and install. If you are
unfamiliar with it, please have a look at :file:`INSTALL`. If you can not find
it, you are probably working bleeding edge in the repository.  Run the
following command in :file:`@PACKAGE_TARNAME@` to get the missing standard
auxiliary files::
    
    autoreconf --verbose --install

To configure (:command:`configure --help` lists possible options), build and
install @PACKAGE_NAME@ now do the following::

    ./configure
    make
    make install

@PACKAGE_NAME@ depends on the `OpenSSL`_ library. Since |PACE| uses CMAC and the
Brainpool curves, the currently unreleased version 1.0.2 of OpenSSL is required.

Furthermore, additional object identifiers from `BSI TR-03110`_ are required.
You have two options to get them to work:

1. Let @PACKAGE_NAME@ load the object identifiers at runtime
2. Patch OpenSSL to include the identifiers

The first option allows you to install an unchanged version of OpenSSL to your
system. However, performance will be slightly worse and there are some
limitations. For example, you won't be able to use the new NIDs as labels in a
switch statement and you need to make sure to call ``EAC_init()`` first.  For
patching OpenSSL we provide :file:`oids.patch`. You can configure
@PACKAGE_NAME@ with :option:`--enable-openssl-install`, which will
automatically download, patch, build and install OpenSSL if needed.

===============================================================================
Cross compiling @PACKAGE_NAME@
===============================================================================

We have added some scripts for the ease of cross compiling for Windows and
Android. Both are tested with Debian wheezy. First create a working
:file:`Makefile`::

    test -x configure || autoreconf --verbose --install
    ./configure

Compiling for Windows
-------------------------------------------------------------------------------

Cross compilation for Windows can be done with::

    make win

================ ==================== ===========================================================================================
Make Variable    Default              Meaning
================ ==================== ===========================================================================================
``WIN_TOOL``     ``i686-w64-mingw32`` cross compiler
``WIN_TOOL_DIR`` ``/usr/${WIN_TOOL}`` root directory of the cross compiler containing the :file:`lib` and :file:`include` folders
================ ==================== ===========================================================================================

On successfull compilation, the Windows binaris can be found in
:file:`@PACKAGE_TARNAME@-@PACKAGE_VERSION@_win32`.

Compiling for Android
-------------------------------------------------------------------------------

Cross compilation for Android can be done with::

    make android

============================= ============================================================================== =====================================================
Make Variable                 Default                                                                        Meaning
============================= ============================================================================== =====================================================
``ANDROID_ARCH``              ``arm``                                                                        target Architecture
``ANDROID_TOOL``              ``${ANDROID_ARCH}-linux-androideabi``                                          cross compiler
``MAKE_STANDALONE_TOOLCHAIN`` ``${HOME}/.local/opt/android-ndk-r9/build/tools/make-standalone-toolchain.sh`` location of the NDK script for creating the toolchain
============================= ============================================================================== =====================================================

On successfull compilation, the Android binaris can be found in
:file:`@PACKAGE_TARNAME@-@PACKAGE_VERSION@_${ANDROID_ARCH}`.


*******************************************************************************
How to use @PACKAGE_NAME@
*******************************************************************************

If you want to know how to use @PACKAGE_NAME@ from C/C++, have a look at our
`API documentation <../../_static/doxygen/modules.html>`_. Here we have a small
example in C:

.. literalinclude:: ../src/example.c
    :language: c

If you want to use other programming languages, for example
Python or Java, you can use our :ref:`SWIG bindings <bindings>`.


*******************************************************************************
Where to get help
*******************************************************************************

Do you have questions, suggestions or contributions? Feedback of any kind is
more than welcome! Please use our `project trackers <@PACKAGE_BUGREPORT@>`_.


*******************************************************************************
Further Reading
*******************************************************************************

.. toctree::
    :maxdepth: 3

    protocols
    bindings.txt


*******************************************************************************
References
*******************************************************************************

.. target-notes::

.. _`BSI TR-03110`: https://www.bsi.bund.de/ContentBSI/Publikationen/TechnischeRichtlinien/tr03110/index_htm.html
.. _`nPA Smart Card Library`: http://vsmartcard.sourceforge.net/npa/README.html
.. _`OpenSSL`: http://openssl.org
