<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="eac_8h" kind="file">
    <compoundname>eac.h</compoundname>
    <includes refid="cv__cert_8h" local="no">eac/cv_cert.h</includes>
    <includes refid="objects_8h" local="no">eac/objects.h</includes>
    <includes local="no">openssl/asn1.h</includes>
    <includes local="no">openssl/buffer.h</includes>
    <includes local="no">openssl/cmac.h</includes>
    <includes local="no">openssl/ec.h</includes>
    <includes local="no">openssl/evp.h</includes>
    <includedby refid="ca_8h" local="yes">eac/ca.h</includedby>
    <includedby refid="pace_8h" local="yes">eac/pace.h</includedby>
    <includedby refid="ri_8h" local="no">eac/ri.h</includedby>
    <includedby refid="ta_8h" local="no">eac/ta.h</includedby>
    <incdepgraph>
      <node id="30">
        <label>openssl/asn1t.h</label>
      </node>
      <node id="28">
        <label>openssl/obj_mac.h</label>
      </node>
      <node id="29">
        <label>openssl/asn1.h</label>
      </node>
      <node id="27">
        <label>eac/objects.h</label>
        <link refid="objects_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>openssl/bio.h</label>
      </node>
      <node id="26">
        <label>eac/cv_cert.h</label>
        <link refid="cv__cert_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>openssl/buffer.h</label>
      </node>
      <node id="25">
        <label>eac/eac.h</label>
        <link refid="eac.h"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>openssl/evp.h</label>
      </node>
      <node id="34">
        <label>openssl/ec.h</label>
      </node>
      <node id="33">
        <label>openssl/cmac.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="38">
        <label>eac/pace.h</label>
        <link refid="pace_8h"/>
      </node>
      <node id="36">
        <label>eac/eac.h</label>
        <link refid="eac.h"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>eac/ta.h</label>
        <link refid="ta_8h"/>
      </node>
      <node id="37">
        <label>eac/ca.h</label>
        <link refid="ca_8h"/>
      </node>
      <node id="39">
        <label>eac/ri.h</label>
        <link refid="ri_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structka__ctx" prot="public">ka_ctx</innerclass>
    <innerclass refid="structpace__ctx" prot="public">pace_ctx</innerclass>
    <innerclass refid="structri__ctx" prot="public">ri_ctx</innerclass>
    <innerclass refid="structta__ctx" prot="public">ta_ctx</innerclass>
    <innerclass refid="structca__ctx" prot="public">ca_ctx</innerclass>
    <innerclass refid="structeac__ctx" prot="public">eac_ctx</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="eac_8h_1ae91df2cf139e05110f5b3dae7f95bfe5" prot="public" static="no">
        <name>EAC_AES_MAC_LENGTH</name>
        <initializer>8</initializer>
        <briefdescription>
<para>TR-03110 always uses CMAC of 8 bytes length for AES MAC. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="360" column="9" bodyfile="/home/fm/Dokumente/openpace/src/eac/eac.h" bodystart="360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sm_1ga8e32964b13fe40c85d644478670ce4f3" prot="public" static="no">
        <name>EAC_ID_PACE</name>
        <initializer>0</initializer>
        <briefdescription>
<para>Identifies the PACE context. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="690" column="9" bodyfile="/home/fm/Dokumente/openpace/src/eac/eac.h" bodystart="690" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sm_1ga2c64f021a1496f58534fa6b7e15eb9a3" prot="public" static="no">
        <name>EAC_ID_CA</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Identifies the CA context. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="692" column="9" bodyfile="/home/fm/Dokumente/openpace/src/eac/eac.h" bodystart="692" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sm_1ga2f47124dcb3bd045fc9b27db1321ebec" prot="public" static="no">
        <name>EAC_ID_TA</name>
        <initializer>2</initializer>
        <briefdescription>
<para>Identifies the TA context. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="694" column="9" bodyfile="/home/fm/Dokumente/openpace/src/eac/eac.h" bodystart="694" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__sm_1ga3ac240a813e152822fed35fbdceacddf" prot="public" static="no">
        <name>EAC_ID_EAC</name>
        <initializer>3</initializer>
        <briefdescription>
<para>Identifies the currently used channel for encryption/decryption. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="696" column="9" bodyfile="/home/fm/Dokumente/openpace/src/eac/eac.h" bodystart="696" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="eac_8h_1a1071d557ae2c818d130e7479c5f10dda" prot="public" static="no">
        <name>eac_tr_version</name>
        <enumvalue id="eac_8h_1a1071d557ae2c818d130e7479c5f10ddaac61560d4c188f5be4670f235967e38d3" prot="public">
          <name>EAC_TR_VERSION</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Undefined type, if nothing else matches. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="eac_8h_1a1071d557ae2c818d130e7479c5f10ddaa6216d6b5d2c9d4b0fea9aa9d8a176ec2" prot="public">
          <name>EAC_TR_VERSION_2_01</name>
          <briefdescription>
<para>Perform EAC according to TR-03110 v2.01. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="eac_8h_1a1071d557ae2c818d130e7479c5f10ddaa8f9c82a9e23fc2501cdb91e5b53f2bb8" prot="public">
          <name>EAC_TR_VERSION_2_02</name>
          <briefdescription>
<para>Perform EAC according to TR-03110 v2.02 and later. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Identification of the specifications to use. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>TR-03110 v2.01 differs from all later versions of the Technical Guideline in how the authentication token is calculated. Therefore old test cards are incompatible with the newer specification. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="63" column="1" bodyfile="/home/fm/Dokumente/openpace/src/eac/eac.h" bodystart="63" bodyend="70"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="eac_8h_1a4402d634a911197302d4e837028e3574" prot="public" static="no">
        <type>struct <ref refid="structka__ctx" kindref="compound">ka_ctx</ref></type>
        <definition>typedef struct ka_ctx  KA_CTX</definition>
        <argsstring></argsstring>
        <name>KA_CTX</name>
        <briefdescription>
<para>Context for a key agreement and subsequent derivation of session keys. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The key agreement itself is done via an underlying DH or ECDH. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="eac_8h_1aa9e73c85f6dda35ca719f6e760f65f7a" prot="public" static="no">
        <type>struct <ref refid="structpace__ctx" kindref="compound">pace_ctx</ref></type>
        <definition>typedef struct pace_ctx  PACE_CTX</definition>
        <argsstring></argsstring>
        <name>PACE_CTX</name>
        <briefdescription>
<para>Context for the Password Authenticated Connection Establishment protocol. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="177" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="eac_8h_1a5f9ef24d00954284d3dfb4988d89ccd5" prot="public" static="no">
        <type>struct <ref refid="structri__ctx" kindref="compound">ri_ctx</ref></type>
        <definition>typedef struct ri_ctx  RI_CTX</definition>
        <argsstring></argsstring>
        <name>RI_CTX</name>
        <briefdescription>
<para>Context for the Restricted Identification protocol. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="223" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="eac_8h_1a8fd953d6eda2a6ef83e4ec23e065fa56" prot="public" static="no">
        <type>const <ref refid="cv__cert_8h_1aea535afcbb11c7ac5f77e4edfb825ab4" kindref="member">CVC_CERT</ref> *(*</type>
        <definition>typedef const CVC_CERT*(* CVC_lookup_cvca_cert)(const unsigned char *chr, size_t car_len)</definition>
        <argsstring>)(const unsigned char *chr, size_t car_len)</argsstring>
        <name>CVC_lookup_cvca_cert</name>
        <briefdescription>
<para>callback for finding the CVCA trust anchor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="226" column="1" bodyfile="/home/fm/Dokumente/openpace/src/eac/eac.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="eac_8h_1a0ead002282275f60d3cd3afa173b3374" prot="public" static="no">
        <type>struct <ref refid="structta__ctx" kindref="compound">ta_ctx</ref></type>
        <definition>typedef struct ta_ctx  TA_CTX</definition>
        <argsstring></argsstring>
        <name>TA_CTX</name>
        <briefdescription>
<para>Context for the Terminal Authentication protocol. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="280" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="eac_8h_1a14e6ca81c4faa924f26f58c7f76fd189" prot="public" static="no">
        <type>X509_STORE *(*</type>
        <definition>typedef X509_STORE*(* X509_lookup_csca_cert)(unsigned long issuer_name_hash)</definition>
        <argsstring>)(unsigned long issuer_name_hash)</argsstring>
        <name>X509_lookup_csca_cert</name>
        <briefdescription>
<para>callback for finding the X.509 trust anchor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="283" column="1" bodyfile="/home/fm/Dokumente/openpace/src/eac/eac.h" bodystart="283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="eac_8h_1a8b43fdb0714ba4c6495c8dfe6c773b04" prot="public" static="no">
        <type>struct <ref refid="structca__ctx" kindref="compound">ca_ctx</ref></type>
        <definition>typedef struct ca_ctx  CA_CTX</definition>
        <argsstring></argsstring>
        <name>CA_CTX</name>
        <briefdescription>
<para>Context for the Chip Authentication protocol. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="321" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" prot="public" static="no">
        <type>struct <ref refid="structeac__ctx" kindref="compound">eac_ctx</ref></type>
        <definition>typedef struct eac_ctx  EAC_CTX</definition>
        <argsstring></argsstring>
        <name>EAC_CTX</name>
        <briefdescription>
<para>Context for the Extended Access Control protocol. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="357" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__management_1ga583066ccb6f5510b69fa278513927764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EAC_init</definition>
        <argsstring>(void)</argsstring>
        <name>EAC_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initializes OpenSSL and the EAC identifier. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput>OpenSSL_add_all_algorithms()</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="372" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__management_1ga6c56cc0f2481edc73bcdba4d5c79585a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EAC_cleanup</definition>
        <argsstring>(void)</argsstring>
        <name>EAC_cleanup</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Wrapper to <computeroutput>EVP_cleanup()</computeroutput> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="377" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__management_1ga193ce25ca9312d11f4f72810f961dd99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
        <definition>EAC_CTX* EAC_CTX_new</definition>
        <argsstring>(void)</argsstring>
        <name>EAC_CTX_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Create a new EAC context. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>New EAC context or NULL in case of an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="384" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__management_1ga6876daecd8aa07c88ed1af1e9df294d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EAC_CTX_clear_free</definition>
        <argsstring>(EAC_CTX *ctx)</argsstring>
        <name>EAC_CTX_clear_free</name>
        <param>
          <type><ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Free an EAC context. </para>        </briefdescription>
        <detaileddescription>
<para>Sensitive memory is cleared with OPENSSL_cleanse().</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="393" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__management_1ga46f0c11c2cb763f166f8392bda3cd250" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EAC_CTX_init_pace</definition>
        <argsstring>(EAC_CTX *ctx, int protocol, int curve)</argsstring>
        <name>EAC_CTX_init_pace</name>
        <param>
          <type><ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>protocol</declname>
        </param>
        <param>
          <type>int</type>
          <declname>curve</declname>
        </param>
        <briefdescription>
<para>Initialize an EAC context for PACE. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context to initialize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">protocol</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the protocol&apos;s OID specifying the exact PACE parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">curve</parametername>
</parameternamelist>
<parameterdescription>
<para>Standardized domain parameter identifier</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success or 0 in case of an error</para></simplesect>
<simplesect kind="see"><para><ref refid="structpace__ctx_1af97dcc517de0fde8e83a7aa40f50da3e" kindref="member">PACE_CTX.protocol</ref> lists possible values for <emphasis>protocol</emphasis> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="407" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__management_1ga8f778cd8d31fa9657eab86eea947092a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EAC_CTX_init_ta</definition>
        <argsstring>(const EAC_CTX *ctx, const unsigned char *privkey, size_t privkey_len, const unsigned char *cvca, size_t cvca_len)</argsstring>
        <name>EAC_CTX_init_ta</name>
        <param>
          <type>const <ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>privkey</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>privkey_len</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>cvca</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cvca_len</declname>
        </param>
        <briefdescription>
<para>Initialize an EAC context for TA with the terminal&apos;s PKI data. Use either a CV certificate or a known CAR for initialization. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">privkey</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) Private key to the given CV certificate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">privkey_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of <emphasis>privkey</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cvca</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) CV certificate to use as trust anchor for verification of other CV certificates </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cvca_len</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) Length of <emphasis>cvca</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success or 0 in case of an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="422" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__management_1ga7eac0f33848a850c1e5609d862e15546" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EAC_CTX_init_ca</definition>
        <argsstring>(EAC_CTX *ctx, int protocol, int curve)</argsstring>
        <name>EAC_CTX_init_ca</name>
        <param>
          <type><ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>protocol</declname>
        </param>
        <param>
          <type>int</type>
          <declname>curve</declname>
        </param>
        <briefdescription>
<para>Initialize an EAC context for Chip Authentication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">protocol</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the protocol&apos;s OID specifying the exact CA parameters to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">curve</parametername>
</parameternamelist>
<parameterdescription>
<para>Standardized domain parameter identifier</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success or 0 in case of an error</para></simplesect>
<simplesect kind="see"><para><ref refid="structca__ctx_1a9322acf2acaef458196c3b26e42993d2" kindref="member">CA_CTX.protocol</ref> lists possible values for <emphasis>protocol</emphasis> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="437" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__management_1ga13af3e1b70c708d99e81e4c7d3b0d750" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EAC_CTX_init_ri</definition>
        <argsstring>(EAC_CTX *ctx, int protocol, int stnd_dp)</argsstring>
        <name>EAC_CTX_init_ri</name>
        <param>
          <type><ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>protocol</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stnd_dp</declname>
        </param>
        <briefdescription>
<para>Initialize an EAC context for Restricted Identification. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">protocol</parametername>
</parameternamelist>
<parameterdescription>
<para>protocol Identifier of the protocol&apos;s OID specifying the exact RI parameters to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stnd_dp</parametername>
</parameternamelist>
<parameterdescription>
<para>Standardized domain parameter identifier</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success or 0 in case of an error</para></simplesect>
<simplesect kind="see"><para><ref refid="structri__ctx_1a26dcc3b24d0be9e786f73da29ac14078" kindref="member">RI_CTX.protocol</ref> lists possible values for <emphasis>protocol</emphasis> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="451" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__management_1ga8e67d2316561446a55256760afd9610e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EAC_CTX_init_ef_cardaccess</definition>
        <argsstring>(unsigned const char *in, size_t in_len, EAC_CTX *ctx)</argsstring>
        <name>EAC_CTX_init_ef_cardaccess</name>
        <param>
          <type>unsigned const char *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>in_len</declname>
        </param>
        <param>
          <type><ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Initialize an EAC context for PACE, TA and CA from the data given in an <computeroutput>EF.CardAccess</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>EF.CardAccess</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of <emphasis>in</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context to initialize</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success or 0 in case of an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="463" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__management_1gaa1eff489ae5f8d56d826c991893decac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EAC_CTX_init_ef_cardsecurity</definition>
        <argsstring>(const unsigned char *ef_cardsecurity, size_t ef_cardsecurity_len, EAC_CTX *ctx)</argsstring>
        <name>EAC_CTX_init_ef_cardsecurity</name>
        <param>
          <type>const unsigned char *</type>
          <declname>ef_cardsecurity</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ef_cardsecurity_len</declname>
        </param>
        <param>
          <type><ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Initialize an EAC context for PACE, TA and CA from the data given in an <computeroutput>EF.CardSecurity</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Performs passive authentication if required.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ef_cardsecurity</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer containing the ASN.1 encoded EF.CardSecurity </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ef_cardsecurity_len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of <emphasis>ef_cardsecurity</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context to initialize</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success or 0 in case of an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="478" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__management_1gaabd3c88e09a47c2513d6c68c0bed7479" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EAC_CTX_get_cvca_lookup_cert</definition>
        <argsstring>(const EAC_CTX *ctx, CVC_lookup_cvca_cert *lookup_cvca_cert)</argsstring>
        <name>EAC_CTX_get_cvca_lookup_cert</name>
        <param>
          <type>const <ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="eac_8h_1a8fd953d6eda2a6ef83e4ec23e065fa56" kindref="member">CVC_lookup_cvca_cert</ref> *</type>
          <declname>lookup_cvca_cert</declname>
        </param>
        <briefdescription>
<para>Return the EAC context&apos;s CVCA lookup callback. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">lookup_cvca_cert</parametername>
</parameternamelist>
<parameterdescription>
<para>lookup callback</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success or 0 in case of an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="490" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__management_1gad5e131a9130b00ff9e589cd365736e71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EAC_CTX_set_cvca_lookup_cert</definition>
        <argsstring>(EAC_CTX *ctx, CVC_lookup_cvca_cert lookup_cvca_cert)</argsstring>
        <name>EAC_CTX_set_cvca_lookup_cert</name>
        <param>
          <type><ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="eac_8h_1a8fd953d6eda2a6ef83e4ec23e065fa56" kindref="member">CVC_lookup_cvca_cert</ref></type>
          <declname>lookup_cvca_cert</declname>
        </param>
        <briefdescription>
<para>Set the CVCA lookup callback. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lookup_cvca_cert</parametername>
</parameternamelist>
<parameterdescription>
<para>lookup callback</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success or 0 in case of an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="499" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__management_1ga842d902f8c9ce5d7ecdc83c2940c313b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="eac_8h_1a8fd953d6eda2a6ef83e4ec23e065fa56" kindref="member">CVC_lookup_cvca_cert</ref></type>
        <definition>CVC_lookup_cvca_cert EAC_get_default_cvca_lookup</definition>
        <argsstring>(void)</argsstring>
        <name>EAC_get_default_cvca_lookup</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return the default lookup of the country verifying CA. </para>        </briefdescription>
        <detaileddescription>
<para>The default callback looks at /etc/eac/$issuer_name_hash.cer for the CSCA certificate, where $issuer_name_hash is an eight character lower hex value of the CSCA subject name.</para><para><simplesect kind="return"><para>default lookup of the country verifying CA</para></simplesect>
<simplesect kind="see"><para><computeroutput>openssl x509 -in CERTIFICATE.cer -inform DER -hash -noout</computeroutput> to obtain the hash value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="511" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__management_1ga6ea1d637fd78de052fff7a048a25aafb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EAC_set_cvc_default_dir</definition>
        <argsstring>(const char *default_dir)</argsstring>
        <name>EAC_set_cvc_default_dir</name>
        <param>
          <type>const char *</type>
          <declname>default_dir</declname>
        </param>
        <briefdescription>
<para>Set directory for <computeroutput><ref refid="group__management_1ga842d902f8c9ce5d7ecdc83c2940c313b" kindref="member">EAC_get_default_cvca_lookup()</ref></computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cvc_default_dir</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="518" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__management_1ga063457a7d04d05cf437f0b6bd3cc1367" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EAC_CTX_get_csca_lookup_cert</definition>
        <argsstring>(const EAC_CTX *ctx, X509_lookup_csca_cert *lookup_cvca_cert)</argsstring>
        <name>EAC_CTX_get_csca_lookup_cert</name>
        <param>
          <type>const <ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="eac_8h_1a14e6ca81c4faa924f26f58c7f76fd189" kindref="member">X509_lookup_csca_cert</ref> *</type>
          <declname>lookup_cvca_cert</declname>
        </param>
        <briefdescription>
<para>Get the CSCA lookup callback. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">lookup_cvca_cert</parametername>
</parameternamelist>
<parameterdescription>
<para>lookup callback</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success or 0 in case of an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="528" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__management_1ga528afab99e4eeb222fcc6b4edc46139e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EAC_CTX_set_csca_lookup_cert</definition>
        <argsstring>(EAC_CTX *ctx, X509_lookup_csca_cert lookup_cvca_cert)</argsstring>
        <name>EAC_CTX_set_csca_lookup_cert</name>
        <param>
          <type><ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="eac_8h_1a14e6ca81c4faa924f26f58c7f76fd189" kindref="member">X509_lookup_csca_cert</ref></type>
          <declname>lookup_cvca_cert</declname>
        </param>
        <briefdescription>
<para>Set the CSCA lookup callback. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lookup_cvca_cert</parametername>
</parameternamelist>
<parameterdescription>
<para>lookup callback</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success or 0 in case of an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="537" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__management_1ga2603a5a963d5d95cce3cc76ea470d794" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="eac_8h_1a14e6ca81c4faa924f26f58c7f76fd189" kindref="member">X509_lookup_csca_cert</ref></type>
        <definition>X509_lookup_csca_cert EAC_get_default_csca_lookup</definition>
        <argsstring>(void)</argsstring>
        <name>EAC_get_default_csca_lookup</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return the default lookup of the country signing CA. </para>        </briefdescription>
        <detaileddescription>
<para>The default callback looks at /etc/eac/$chr for the CVCA certificate, where $chr is the card holder reference of the CVCA.</para><para><simplesect kind="return"><para>default lookup of the country verifying CA </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="546" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__management_1ga595722cf2af1e61aaaa67a6ff23dcaad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EAC_set_x509_default_dir</definition>
        <argsstring>(const char *default_dir)</argsstring>
        <name>EAC_set_x509_default_dir</name>
        <param>
          <type>const char *</type>
          <declname>default_dir</declname>
        </param>
        <briefdescription>
<para>Set directory for <computeroutput><ref refid="group__management_1ga2603a5a963d5d95cce3cc76ea470d794" kindref="member">EAC_get_default_csca_lookup()</ref></computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x509_default_dir</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="553" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__sm_1ga9e1039cf926ca0964f430ec4f0438eb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BUF_MEM *</type>
        <definition>BUF_MEM* EAC_add_iso_pad</definition>
        <argsstring>(const EAC_CTX *ctx, const BUF_MEM *unpadded)</argsstring>
        <name>EAC_add_iso_pad</name>
        <param>
          <type>const <ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const BUF_MEM *</type>
          <declname>unpadded</declname>
        </param>
        <briefdescription>
<para>Pad a buffer using ISO/IEC 9797-1 padding method 2. </para>        </briefdescription>
        <detaileddescription>
<para>The block size is calculated from the currently selected SM context.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">unpadded</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to pad</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Padded input or NULL in case of an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="573" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__sm_1ga2d8e5441271c5fc9b93b4786325211a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BUF_MEM *</type>
        <definition>BUF_MEM* EAC_remove_iso_pad</definition>
        <argsstring>(const BUF_MEM *padded)</argsstring>
        <name>EAC_remove_iso_pad</name>
        <param>
          <type>const BUF_MEM *</type>
          <declname>padded</declname>
        </param>
        <briefdescription>
<para>Remove ISO/IEC 9797-1 padding method 2 from a message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">padded</parametername>
</parameternamelist>
<parameterdescription>
<para>Padded message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Unpadded message or NULL in case of an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="582" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__sm_1gae19014262be52d19ad563c9c5e16ffcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EAC_increment_ssc</definition>
        <argsstring>(const EAC_CTX *ctx)</argsstring>
        <name>EAC_increment_ssc</name>
        <param>
          <type>const <ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Increment the Send Sequence Counter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success or 0 in case of an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="591" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__sm_1ga6e5edec29e781d9d665fcf160b2093e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EAC_reset_ssc</definition>
        <argsstring>(const EAC_CTX *ctx)</argsstring>
        <name>EAC_reset_ssc</name>
        <param>
          <type>const <ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Reset the Send Sequence Counter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success or 0 in case of an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="600" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__sm_1gacc8beba0a4e3ae9448ea3256cb5e4341" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EAC_set_ssc</definition>
        <argsstring>(const EAC_CTX *ctx, unsigned long ssc)</argsstring>
        <name>EAC_set_ssc</name>
        <param>
          <type>const <ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>ssc</declname>
        </param>
        <briefdescription>
<para>Set the Send Sequence Counter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ssc</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success or 0 in case of an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="609" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__sm_1ga56be34fb57fd13db3be27161c21ecccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BUF_MEM *</type>
        <definition>BUF_MEM* EAC_encrypt</definition>
        <argsstring>(const EAC_CTX *ctx, const BUF_MEM *data)</argsstring>
        <name>EAC_encrypt</name>
        <param>
          <type>const <ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const BUF_MEM *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Encrypts data according to TR-03110 F.2. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to encrypt</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Encrypted data or NULL in case of an error</para></simplesect>
<simplesect kind="note"><para><emphasis>data</emphasis> must already be padded to block length </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="622" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__sm_1ga0582a6acf2cc8c435f9bf54f0b750258" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BUF_MEM *</type>
        <definition>BUF_MEM* EAC_decrypt</definition>
        <argsstring>(const EAC_CTX *ctx, const BUF_MEM *data)</argsstring>
        <name>EAC_decrypt</name>
        <param>
          <type>const <ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const BUF_MEM *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Decrypt data according to TR-03110 F.2. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to decrypt</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Decrypted data or NULL in case of an error</para></simplesect>
<simplesect kind="note"><para><emphasis>data</emphasis> must already be padded to block length </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="635" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__sm_1ga81da2809a9490aa81825e2f3257d08ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BUF_MEM *</type>
        <definition>BUF_MEM* EAC_authenticate</definition>
        <argsstring>(const EAC_CTX *ctx, const BUF_MEM *data)</argsstring>
        <name>EAC_authenticate</name>
        <param>
          <type>const <ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const BUF_MEM *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Authenticate data according to TR-03110 F.2. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to authenticate</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>MAC or NULL in case of an error</para></simplesect>
<simplesect kind="note"><para><emphasis>data</emphasis> must already be padded to block length </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="648" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__sm_1ga50467cdf67ae44a53f86a583fc19797d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EAC_verify_authentication</definition>
        <argsstring>(const EAC_CTX *ctx, const BUF_MEM *data, const BUF_MEM *mac)</argsstring>
        <name>EAC_verify_authentication</name>
        <param>
          <type>const <ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const BUF_MEM *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const BUF_MEM *</type>
          <declname>mac</declname>
        </param>
        <briefdescription>
<para>Verify authenticated data according to TR-03110 F.2. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to authenticate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mac</parametername>
</parameternamelist>
<parameterdescription>
<para>The MAC that is going to be verified</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the MAC can be correctly verified, 0 otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="659" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__sm_1gab211f297f88ae57ce11588f8754c9c8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BUF_MEM *</type>
        <definition>BUF_MEM* EAC_Comp</definition>
        <argsstring>(const EAC_CTX *ctx, int id, const BUF_MEM *pub)</argsstring>
        <name>EAC_Comp</name>
        <param>
          <type>const <ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const BUF_MEM *</type>
          <declname>pub</declname>
        </param>
        <briefdescription>
<para>Compresse a public key according to TR-03110 Table A.2. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>accepts <computeroutput>EAC_ID_PACE</computeroutput>, <computeroutput>EAC_ID_CA</computeroutput>, <computeroutput>EAC_ID_TA</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pub</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw public key</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Compressed public key or NULL in case of an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="672" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__sm_1ga9ebe2d91e1c9270c7d13443100fcd524" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BUF_MEM *</type>
        <definition>BUF_MEM* EAC_hash_certificate_description</definition>
        <argsstring>(const unsigned char *cert_desc, size_t cert_desc_len)</argsstring>
        <name>EAC_hash_certificate_description</name>
        <param>
          <type>const unsigned char *</type>
          <declname>cert_desc</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cert_desc_len</declname>
        </param>
        <briefdescription>
<para>Compute the hash of a CV certificate description. </para>        </briefdescription>
        <detaileddescription>
<para>The hash can then be compared to the hash contained in the corresponding CV certificate.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cert_desc</parametername>
</parameternamelist>
<parameterdescription>
<para>ASN1 encoded CV certificate description </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cert_desc_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of <emphasis>cert_desc</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Hash of <emphasis>cert_desc</emphasis> or NULL in case of an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="686" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__sm_1ga5df516d484102e4315a1712be8f8a656" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EAC_CTX_set_encryption_ctx</definition>
        <argsstring>(EAC_CTX *ctx, int id)</argsstring>
        <name>EAC_CTX_set_encryption_ctx</name>
        <param>
          <type><ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Set the SM context for encryption, decryption and authentication. </para>        </briefdescription>
        <detaileddescription>
<para>Calls <emphasis><ref refid="group__sm_1ga6e5edec29e781d9d665fcf160b2093e3" kindref="member">EAC_reset_ssc()</ref></emphasis> </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>accepts <computeroutput>EAC_ID_PACE</computeroutput>, <computeroutput>EAC_ID_CA</computeroutput>, <computeroutput>EAC_ID_EAC</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success or 0 in case of an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="709" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__printing_1ga69dfa847f834d5cfa559a88ceb8d04c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int EAC_CTX_print_private</definition>
        <argsstring>(BIO *out, const EAC_CTX *ctx, int indent)</argsstring>
        <name>EAC_CTX_print_private</name>
        <param>
          <type>BIO *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="eac_8h_1ae9b1b2593999b3c1b8eb10a4629b7c94" kindref="member">EAC_CTX</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indent</declname>
        </param>
        <briefdescription>
<para>Print EAC context including private data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">out</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to print the data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>EAC context to be printed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">indent</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of whitespaces used for indenting the output</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success or 0 in case of an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="727" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__printing_1ga7bd156b63fc10e59fddb4d9fbe6f2f5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BUF_MEM_print</definition>
        <argsstring>(BIO *out, const BUF_MEM *buf, int indent)</argsstring>
        <name>BUF_MEM_print</name>
        <param>
          <type>BIO *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const BUF_MEM *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indent</declname>
        </param>
        <briefdescription>
<para>Prints buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">out</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to print the data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to print </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">indent</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of whitespaces used for indenting the output</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 on success or 0 in case of an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="737" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__printing_1ga2ed7b3ca7230dc0d6f66e64a72257ff2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BUF_MEM_clear_free</definition>
        <argsstring>(BUF_MEM *b)</argsstring>
        <name>BUF_MEM_clear_free</name>
        <param>
          <type>BUF_MEM *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Frees and wipes a buffer. </para>        </briefdescription>
        <detaileddescription>
<para>Calls <computeroutput>OPENSSL_cleanse()</computeroutput> and <computeroutput>BUF_MEM_free()</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to print the data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fm/Dokumente/openpace/src/eac/eac.h" line="748" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Interface for Extended Access Control. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Frank Morgner <ulink url="mailto:frankmorgner@gmail.com">frankmorgner@gmail.com</ulink> </para></simplesect>
<simplesect kind="author"><para>Dominik Oepen <ulink url="mailto:oepen@informatik.hu-berlin.de">oepen@informatik.hu-berlin.de</ulink> </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2010-2012<sp/>Frank<sp/>Morgner<sp/>and<sp/>Dominik<sp/>Oepen</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>OpenPACE.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>OpenPACE<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it<sp/>under</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>OpenPACE<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but<sp/>WITHOUT<sp/>ANY</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>details.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>along<sp/>with</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>OpenPACE.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor">#ifndef<sp/>EAC_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EAC_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cv__cert_8h" kindref="compound">eac/cv_cert.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="objects_8h" kindref="compound">eac/objects.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/asn1.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/buffer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/cmac.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/ec.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/evp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="eac_8h_1a1071d557ae2c818d130e7479c5f10dda" refkind="member"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="eac_8h_1a1071d557ae2c818d130e7479c5f10dda" kindref="member">eac_tr_version</ref><sp/>{</highlight></codeline>
<codeline lineno="65" refid="eac_8h_1a1071d557ae2c818d130e7479c5f10ddaac61560d4c188f5be4670f235967e38d3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="eac_8h_1a1071d557ae2c818d130e7479c5f10ddaac61560d4c188f5be4670f235967e38d3" kindref="member">EAC_TR_VERSION</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="67" refid="eac_8h_1a1071d557ae2c818d130e7479c5f10ddaa6216d6b5d2c9d4b0fea9aa9d8a176ec2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="eac_8h_1a1071d557ae2c818d130e7479c5f10ddaa6216d6b5d2c9d4b0fea9aa9d8a176ec2" kindref="member">EAC_TR_VERSION_2_01</ref>,</highlight></codeline>
<codeline lineno="69" refid="eac_8h_1a1071d557ae2c818d130e7479c5f10ddaa8f9c82a9e23fc2501cdb91e5b53f2bb8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="eac_8h_1a1071d557ae2c818d130e7479c5f10ddaa8f9c82a9e23fc2501cdb91e5b53f2bb8" kindref="member">EAC_TR_VERSION_2_02</ref>,</highlight></codeline>
<codeline lineno="70"><highlight class="normal">};</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="structka__ctx" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structka__ctx" kindref="compound">ka_ctx</ref><sp/>{</highlight></codeline>
<codeline lineno="79" refid="structka__ctx_1a745aa4812acdf1ea3f08549c09ba1a09" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EVP_MD<sp/>*<sp/><ref refid="structka__ctx_1a745aa4812acdf1ea3f08549c09ba1a09" kindref="member">md</ref>;</highlight></codeline>
<codeline lineno="81" refid="structka__ctx_1a3706295ac5dda046703d902f883766eb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ENGINE<sp/>*<sp/><ref refid="structka__ctx_1a3706295ac5dda046703d902f883766eb" kindref="member">md_engine</ref>;</highlight></codeline>
<codeline lineno="83" refid="structka__ctx_1aa2ba5bdac4b20c2b4add9cdcb505cf04" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CMAC_CTX<sp/>*<sp/><ref refid="structka__ctx_1aa2ba5bdac4b20c2b4add9cdcb505cf04" kindref="member">cmac_ctx</ref>;</highlight></codeline>
<codeline lineno="85" refid="structka__ctx_1a6249dbb3a4ae07996486bc9b8b36d502" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EVP_CIPHER<sp/>*<sp/><ref refid="structka__ctx_1a6249dbb3a4ae07996486bc9b8b36d502" kindref="member">cipher</ref>;</highlight></codeline>
<codeline lineno="87" refid="structka__ctx_1a2802cdc905121995ed131f2964acd2f8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ENGINE<sp/>*<sp/><ref refid="structka__ctx_1a2802cdc905121995ed131f2964acd2f8" kindref="member">cipher_engine</ref>;</highlight></codeline>
<codeline lineno="89" refid="structka__ctx_1af735a85606610d4d19cf151af4f84acf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="structka__ctx_1af735a85606610d4d19cf151af4f84acf" kindref="member">iv</ref>;</highlight></codeline>
<codeline lineno="91" refid="structka__ctx_1adb07ad439522dd039b82ab98df682a82" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structka__ctx_1adb07ad439522dd039b82ab98df682a82" kindref="member">mac_keylen</ref>;</highlight></codeline>
<codeline lineno="93" refid="structka__ctx_1a44649e3f01e85ba3493a39a8eb2c7412" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structka__ctx_1a44649e3f01e85ba3493a39a8eb2c7412" kindref="member">enc_keylen</ref>;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="structka__ctx_1a014527b2e7c2d29b9ea3d696b0f6f27d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUF_MEM<sp/>*<sp/>(*generate_key)(EVP_PKEY<sp/>*<ref refid="structka__ctx_1a67c28ed126bc0cc85b21f854edb1c6bc" kindref="member">key</ref>,<sp/>BN_CTX<sp/>*bn_ctx);</highlight></codeline>
<codeline lineno="113" refid="structka__ctx_1a49b570f5c82aeab28d087c8294780031" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUF_MEM<sp/>*<sp/>(*compute_key)(EVP_PKEY<sp/>*<ref refid="structka__ctx_1a67c28ed126bc0cc85b21f854edb1c6bc" kindref="member">key</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BUF_MEM<sp/>*in,<sp/>BN_CTX<sp/>*bn_ctx);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="structka__ctx_1a67c28ed126bc0cc85b21f854edb1c6bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVP_PKEY<sp/>*<ref refid="structka__ctx_1a67c28ed126bc0cc85b21f854edb1c6bc" kindref="member">key</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="structka__ctx_1aa1bbed50cc0903ae872e4b19ac2c7226" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUF_MEM<sp/>*<ref refid="structka__ctx_1aa1bbed50cc0903ae872e4b19ac2c7226" kindref="member">shared_secret</ref>;</highlight></codeline>
<codeline lineno="121" refid="structka__ctx_1a4b9ab1a97367a0a25f4c8fc27520abc7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUF_MEM<sp/>*<ref refid="structka__ctx_1a4b9ab1a97367a0a25f4c8fc27520abc7" kindref="member">k_enc</ref>;</highlight></codeline>
<codeline lineno="123" refid="structka__ctx_1a2fa30aa5aa06ddc90382cdaf904c34a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUF_MEM<sp/>*<ref refid="structka__ctx_1a2fa30aa5aa06ddc90382cdaf904c34a1" kindref="member">k_mac</ref>;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}<sp/><ref refid="eac_8h_1a4402d634a911197302d4e837028e3574" kindref="member">KA_CTX</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="structpace__ctx" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpace__ctx" kindref="compound">pace_ctx</ref><sp/>{</highlight></codeline>
<codeline lineno="154" refid="structpace__ctx_1af97dcc517de0fde8e83a7aa40f50da3e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structpace__ctx_1af97dcc517de0fde8e83a7aa40f50da3e" kindref="member">protocol</ref>;</highlight></codeline>
<codeline lineno="156" refid="structpace__ctx_1a1e1c98e8c010ac57c1529d4a7ac7d140" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structpace__ctx_1a1e1c98e8c010ac57c1529d4a7ac7d140" kindref="member">version</ref>;</highlight></codeline>
<codeline lineno="158" refid="structpace__ctx_1af298b849509aa042d7704348e89d09d7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structpace__ctx_1af298b849509aa042d7704348e89d09d7" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="162" refid="structpace__ctx_1a693587f2f0ce3376e02308dd55152bc9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>BUF_MEM<sp/>*<sp/>(*map_generate_key)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpace__ctx" kindref="compound">pace_ctx</ref><sp/>*ctx,<sp/>BN_CTX<sp/>*bn_ctx);</highlight></codeline>
<codeline lineno="166" refid="structpace__ctx_1a989c4b5e086fdd04a2efb08a24c70d55" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*<ref refid="structpace__ctx_1a989c4b5e086fdd04a2efb08a24c70d55" kindref="member">map_compute_key</ref>)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpace__ctx" kindref="compound">pace_ctx</ref><sp/>*<sp/>ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BUF_MEM<sp/>*<sp/>s,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BUF_MEM<sp/>*<sp/>in,<sp/>BN_CTX<sp/>*bn_ctx);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="structpace__ctx_1a9e8dc5891a4991d3ee15681959a530f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>EVP_PKEY<sp/>*<ref refid="structpace__ctx_1a9e8dc5891a4991d3ee15681959a530f4" kindref="member">static_key</ref>;</highlight></codeline>
<codeline lineno="172" refid="structpace__ctx_1a13ac5102711cf4fe79065811bff0fb2c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structka__ctx" kindref="compound">KA_CTX</ref><sp/>*<ref refid="structpace__ctx_1a13ac5102711cf4fe79065811bff0fb2c" kindref="member">ka_ctx</ref>;</highlight></codeline>
<codeline lineno="174" refid="structpace__ctx_1a01213725b7c8d6e154b9b0d78d4dd2d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>BUF_MEM<sp/>*<ref refid="structpace__ctx_1a01213725b7c8d6e154b9b0d78d4dd2d8" kindref="member">nonce</ref>;</highlight></codeline>
<codeline lineno="176" refid="structpace__ctx_1a3d6695ce3c69a1b98d33fac739cdc31b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>BUF_MEM<sp/>*<ref refid="structpace__ctx_1a3d6695ce3c69a1b98d33fac739cdc31b" kindref="member">my_eph_pubkey</ref>;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}<sp/><ref refid="eac_8h_1aa9e73c85f6dda35ca719f6e760f65f7a" kindref="member">PACE_CTX</ref>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="structri__ctx" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structri__ctx" kindref="compound">ri_ctx</ref><sp/>{</highlight></codeline>
<codeline lineno="197" refid="structri__ctx_1a26dcc3b24d0be9e786f73da29ac14078" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structri__ctx_1a26dcc3b24d0be9e786f73da29ac14078" kindref="member">protocol</ref>;</highlight></codeline>
<codeline lineno="199" refid="structri__ctx_1aa02f62fa11872a3ea637b934dca3de9e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structri__ctx_1aa02f62fa11872a3ea637b934dca3de9e" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="201" refid="structri__ctx_1ad6a276a184c01a115b8f6f602aea0bf5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EVP_MD<sp/>*<sp/><ref refid="structri__ctx_1ad6a276a184c01a115b8f6f602aea0bf5" kindref="member">md</ref>;</highlight></codeline>
<codeline lineno="210" refid="structri__ctx_1a0575020ded3354b7de0bcbfb893ec865" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>BUF_MEM<sp/>*<sp/>(*generate_key)(EVP_PKEY<sp/>*key,<sp/>BN_CTX<sp/>*bn_ctx);</highlight></codeline>
<codeline lineno="220" refid="structri__ctx_1a83529722bfbf8b9071d44380b51abe61" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>BUF_MEM<sp/>*<sp/>(*compute_key)(EVP_PKEY<sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BUF_MEM<sp/>*in,<sp/>BN_CTX<sp/>*bn_ctx);</highlight></codeline>
<codeline lineno="222" refid="structri__ctx_1a8de84de9b8a818bfc0f6910d2b6d1505" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>EVP_PKEY<sp/>*<ref refid="structri__ctx_1a8de84de9b8a818bfc0f6910d2b6d1505" kindref="member">static_key</ref>;</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}<sp/><ref refid="eac_8h_1a5f9ef24d00954284d3dfb4988d89ccd5" kindref="member">RI_CTX</ref>;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="226" refid="eac_8h_1a8fd953d6eda2a6ef83e4ec23e065fa56" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcvc__cert__seq__st" kindref="compound">CVC_CERT</ref><sp/>*<sp/>(*CVC_lookup_cvca_cert)<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*chr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>car_len);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="structta__ctx" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structta__ctx" kindref="compound">ta_ctx</ref><sp/>{</highlight></codeline>
<codeline lineno="231" refid="structta__ctx_1a6e976bf9c7771c2f06405aa17cd45741" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structta__ctx_1a6e976bf9c7771c2f06405aa17cd45741" kindref="member">version</ref>;</highlight></codeline>
<codeline lineno="248" refid="structta__ctx_1aab0b4778bb8406c6dfcae630a7ee953d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structta__ctx_1aab0b4778bb8406c6dfcae630a7ee953d" kindref="member">protocol</ref>;</highlight></codeline>
<codeline lineno="250" refid="structta__ctx_1a1691c4c8e297c12194f292ec4b9562ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ENGINE<sp/>*<ref refid="structta__ctx_1a1691c4c8e297c12194f292ec4b9562ef" kindref="member">key_engine</ref>;</highlight></codeline>
<codeline lineno="252" refid="structta__ctx_1a345e76e2dbe501008d567a0394bdc477" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>EVP_PKEY<sp/>*<ref refid="structta__ctx_1a345e76e2dbe501008d567a0394bdc477" kindref="member">priv_key</ref>;</highlight></codeline>
<codeline lineno="254" refid="structta__ctx_1a003a31cec341cc32c7c8d3020674bdf4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>EVP_PKEY<sp/>*<ref refid="structta__ctx_1a003a31cec341cc32c7c8d3020674bdf4" kindref="member">pub_key</ref>;</highlight></codeline>
<codeline lineno="256" refid="structta__ctx_1a5024a276b503f26170e0f119ff770e18" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>BUF_MEM<sp/>*<ref refid="structta__ctx_1a5024a276b503f26170e0f119ff770e18" kindref="member">pk_pcd</ref>;</highlight></codeline>
<codeline lineno="258" refid="structta__ctx_1a15f1a7fc87648ca8bb8a918d2b8c1d7a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>BUF_MEM<sp/>*<ref refid="structta__ctx_1a15f1a7fc87648ca8bb8a918d2b8c1d7a" kindref="member">nonce</ref>;</highlight></codeline>
<codeline lineno="260" refid="structta__ctx_1a5fa8c24d79d367f6573687d2fb98e298" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcvc__cert__seq__st" kindref="compound">CVC_CERT</ref><sp/>*<ref refid="structta__ctx_1a5fa8c24d79d367f6573687d2fb98e298" kindref="member">trust_anchor</ref>;</highlight></codeline>
<codeline lineno="262" refid="structta__ctx_1a69786f37170911c75aeb2cad26f287c6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcvc__cert__seq__st" kindref="compound">CVC_CERT</ref><sp/>*<ref refid="structta__ctx_1a69786f37170911c75aeb2cad26f287c6" kindref="member">current_cert</ref>;</highlight></codeline>
<codeline lineno="264" refid="structta__ctx_1a0158428cd0d0deaf19a7efe00fa75ad7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcvc__cert__seq__st" kindref="compound">CVC_CERT</ref><sp/>*<ref refid="structta__ctx_1a0158428cd0d0deaf19a7efe00fa75ad7" kindref="member">new_trust_anchor</ref>;</highlight></codeline>
<codeline lineno="270" refid="structta__ctx_1a78ef4b31a6f23f6760214a1fcdaff815" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structta__ctx_1a78ef4b31a6f23f6760214a1fcdaff815" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="279" refid="structta__ctx_1a42c4f67266f5489bce3a59d937380c33" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="eac_8h_1a8fd953d6eda2a6ef83e4ec23e065fa56" kindref="member">CVC_lookup_cvca_cert</ref><sp/><ref refid="structta__ctx_1a42c4f67266f5489bce3a59d937380c33" kindref="member">lookup_cvca_cert</ref>;</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}<sp/><ref refid="eac_8h_1a0ead002282275f60d3cd3afa173b3374" kindref="member">TA_CTX</ref>;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="283" refid="eac_8h_1a14e6ca81c4faa924f26f58c7f76fd189" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>X509_STORE<sp/>*<sp/>(*X509_lookup_csca_cert)<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>issuer_name_hash);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="286" refid="structca__ctx" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structca__ctx" kindref="compound">ca_ctx</ref><sp/>{</highlight></codeline>
<codeline lineno="288" refid="structca__ctx_1a01f3b87f0a1c8db086aeecb359e22f81" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structca__ctx_1a01f3b87f0a1c8db086aeecb359e22f81" kindref="member">version</ref>;</highlight></codeline>
<codeline lineno="301" refid="structca__ctx_1a9322acf2acaef458196c3b26e42993d2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structca__ctx_1a9322acf2acaef458196c3b26e42993d2" kindref="member">protocol</ref>;</highlight></codeline>
<codeline lineno="303" refid="structca__ctx_1a0f1a30c4b0548cdb0920e928351964d6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structca__ctx_1a0f1a30c4b0548cdb0920e928351964d6" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="309" refid="structca__ctx_1a4b00f374e7f43c90c6799276feb2cf2a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structca__ctx_1a4b00f374e7f43c90c6799276feb2cf2a" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="311" refid="structca__ctx_1ad869c8e99104ace4478a9f5b52a51abc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structka__ctx" kindref="compound">KA_CTX</ref><sp/>*<ref refid="structca__ctx_1ad869c8e99104ace4478a9f5b52a51abc" kindref="member">ka_ctx</ref>;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="320" refid="structca__ctx_1ac2999e422c563a94a34746cd2afca8bb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="eac_8h_1a14e6ca81c4faa924f26f58c7f76fd189" kindref="member">X509_lookup_csca_cert</ref><sp/><ref refid="structca__ctx_1ac2999e422c563a94a34746cd2afca8bb" kindref="member">lookup_csca_cert</ref>;</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}<sp/><ref refid="eac_8h_1a8b43fdb0714ba4c6495c8dfe6c773b04" kindref="member">CA_CTX</ref>;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="324" refid="structeac__ctx" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structeac__ctx" kindref="compound">eac_ctx</ref><sp/>{</highlight></codeline>
<codeline lineno="326" refid="structeac__ctx_1af35b8ee2566fcb58b784d18c6955b044" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="eac_8h_1a1071d557ae2c818d130e7479c5f10dda" kindref="member">eac_tr_version</ref><sp/><ref refid="structeac__ctx_1af35b8ee2566fcb58b784d18c6955b044" kindref="member">tr_version</ref>;</highlight></codeline>
<codeline lineno="328" refid="structeac__ctx_1aa4689aae53a76259fc0a5b6986beed44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX<sp/>*<sp/><ref refid="structeac__ctx_1aa4689aae53a76259fc0a5b6986beed44" kindref="member">bn_ctx</ref>;</highlight></codeline>
<codeline lineno="330" refid="structeac__ctx_1a66f01e318e94ef27f184496c1ee08258" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>EVP_MD_CTX<sp/>*<sp/><ref refid="structeac__ctx_1a66f01e318e94ef27f184496c1ee08258" kindref="member">md_ctx</ref>;</highlight></codeline>
<codeline lineno="332" refid="structeac__ctx_1ae4ae226d67fed219a32807c74246f96d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>EVP_CIPHER_CTX<sp/>*<sp/><ref refid="structeac__ctx_1ae4ae226d67fed219a32807c74246f96d" kindref="member">cipher_ctx</ref>;</highlight></codeline>
<codeline lineno="336" refid="structeac__ctx_1a932f295824a7c470be10a2399692b14e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpace__ctx" kindref="compound">PACE_CTX</ref><sp/>*<ref refid="structeac__ctx_1a932f295824a7c470be10a2399692b14e" kindref="member">pace_ctx</ref>;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structeac__ctx_1aba9bee0f71ee1e7483f6e4ad6a14e173" kindref="member">STACK_OF</ref>(<ref refid="structpace__ctx" kindref="compound">PACE_CTX</ref><sp/>*)<sp/>pace_ctxs;</highlight></codeline>
<codeline lineno="342" refid="structeac__ctx_1aeba652c7c12edbc1154c329f923e516d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structri__ctx" kindref="compound">RI_CTX</ref><sp/>*<ref refid="structri__ctx" kindref="compound">ri_ctx</ref>;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structeac__ctx_1aba9bee0f71ee1e7483f6e4ad6a14e173" kindref="member">STACK_OF</ref>(<ref refid="structri__ctx" kindref="compound">RI_CTX</ref><sp/>*)<sp/>ri_ctxs;</highlight></codeline>
<codeline lineno="346" refid="structeac__ctx_1a2d80bb6842313788c23c422d12c81437" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structta__ctx" kindref="compound">TA_CTX</ref><sp/>*<ref refid="structta__ctx" kindref="compound">ta_ctx</ref>;</highlight></codeline>
<codeline lineno="350" refid="structeac__ctx_1a335d8db00b3c531ec2a8bdf70259a487" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structca__ctx" kindref="compound">CA_CTX</ref><sp/>*<ref refid="structca__ctx" kindref="compound">ca_ctx</ref>;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structeac__ctx_1aba9bee0f71ee1e7483f6e4ad6a14e173" kindref="member">STACK_OF</ref>(<ref refid="structca__ctx" kindref="compound">CA_CTX</ref><sp/>*)<sp/>ca_ctxs;</highlight></codeline>
<codeline lineno="354" refid="structeac__ctx_1a920e45bffa7ac62240aa98b448286aac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structka__ctx" kindref="compound">KA_CTX</ref><sp/>*<ref refid="structeac__ctx_1a920e45bffa7ac62240aa98b448286aac" kindref="member">key_ctx</ref>;</highlight></codeline>
<codeline lineno="356" refid="structeac__ctx_1ac5ac966e53d3d76ea6861a7bf8e5ad5b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM<sp/>*<ref refid="structeac__ctx_1ac5ac966e53d3d76ea6861a7bf8e5ad5b" kindref="member">ssc</ref>;</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}<sp/><ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref>;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="360" refid="eac_8h_1ae91df2cf139e05110f5b3dae7f95bfe5" refkind="member"><highlight class="preprocessor">#define<sp/>EAC_AES_MAC_LENGTH<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__management_1ga583066ccb6f5510b69fa278513927764" kindref="member">EAC_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__management_1ga6c56cc0f2481edc73bcdba4d5c79585a" kindref="member">EAC_cleanup</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><ref refid="group__management_1ga193ce25ca9312d11f4f72810f961dd99" kindref="member">EAC_CTX_new</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__management_1ga6876daecd8aa07c88ed1af1e9df294d2" kindref="member">EAC_CTX_clear_free</ref>(<ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><ref refid="group__management_1ga46f0c11c2cb763f166f8392bda3cd250" kindref="member">EAC_CTX_init_pace</ref>(<ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>protocol,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>curve);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><ref refid="group__management_1ga8f778cd8d31fa9657eab86eea947092a" kindref="member">EAC_CTX_init_ta</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*privkey,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>privkey_len,</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cvca,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cvca_len);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__management_1ga7eac0f33848a850c1e5609d862e15546" kindref="member">EAC_CTX_init_ca</ref>(<ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>protocol,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>curve);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><ref refid="group__management_1ga13af3e1b70c708d99e81e4c7d3b0d750" kindref="member">EAC_CTX_init_ri</ref>(<ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>protocol,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stnd_dp);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__management_1ga8e67d2316561446a55256760afd9610e" kindref="member">EAC_CTX_init_ef_cardaccess</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>in_len,</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__management_1gaa1eff489ae5f8d56d826c991893decac" kindref="member">EAC_CTX_init_ef_cardsecurity</ref>(</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ef_cardsecurity,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ef_cardsecurity_len,</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__management_1gaabd3c88e09a47c2513d6c68c0bed7479" kindref="member">EAC_CTX_get_cvca_lookup_cert</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*ctx,<sp/><ref refid="eac_8h_1a8fd953d6eda2a6ef83e4ec23e065fa56" kindref="member">CVC_lookup_cvca_cert</ref><sp/>*lookup_cvca_cert);</highlight></codeline>
<codeline lineno="499"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__management_1gad5e131a9130b00ff9e589cd365736e71" kindref="member">EAC_CTX_set_cvca_lookup_cert</ref>(<ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*ctx,<sp/><ref refid="eac_8h_1a8fd953d6eda2a6ef83e4ec23e065fa56" kindref="member">CVC_lookup_cvca_cert</ref><sp/>lookup_cvca_cert);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><ref refid="eac_8h_1a8fd953d6eda2a6ef83e4ec23e065fa56" kindref="member">CVC_lookup_cvca_cert</ref><sp/><ref refid="group__management_1ga842d902f8c9ce5d7ecdc83c2940c313b" kindref="member">EAC_get_default_cvca_lookup</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__management_1ga6ea1d637fd78de052fff7a048a25aafb" kindref="member">EAC_set_cvc_default_dir</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*default_dir);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__management_1ga063457a7d04d05cf437f0b6bd3cc1367" kindref="member">EAC_CTX_get_csca_lookup_cert</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*ctx,<sp/><ref refid="eac_8h_1a14e6ca81c4faa924f26f58c7f76fd189" kindref="member">X509_lookup_csca_cert</ref><sp/>*lookup_cvca_cert);</highlight></codeline>
<codeline lineno="537"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__management_1ga528afab99e4eeb222fcc6b4edc46139e" kindref="member">EAC_CTX_set_csca_lookup_cert</ref>(<ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*ctx,<sp/><ref refid="eac_8h_1a14e6ca81c4faa924f26f58c7f76fd189" kindref="member">X509_lookup_csca_cert</ref><sp/>lookup_cvca_cert);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><ref refid="eac_8h_1a14e6ca81c4faa924f26f58c7f76fd189" kindref="member">X509_lookup_csca_cert</ref><sp/><ref refid="group__management_1ga2603a5a963d5d95cce3cc76ea470d794" kindref="member">EAC_get_default_csca_lookup</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__management_1ga595722cf2af1e61aaaa67a6ff23dcaad" kindref="member">EAC_set_x509_default_dir</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*default_dir);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal">BUF_MEM<sp/>*</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><ref refid="group__sm_1ga9e1039cf926ca0964f430ec4f0438eb3" kindref="member">EAC_add_iso_pad</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BUF_MEM<sp/>*<sp/>unpadded);</highlight></codeline>
<codeline lineno="581"><highlight class="normal">BUF_MEM<sp/>*</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><ref refid="group__sm_1ga2d8e5441271c5fc9b93b4786325211a4" kindref="member">EAC_remove_iso_pad</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BUF_MEM<sp/>*<sp/>padded);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__sm_1gae19014262be52d19ad563c9c5e16ffcf" kindref="member">EAC_increment_ssc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__sm_1ga6e5edec29e781d9d665fcf160b2093e3" kindref="member">EAC_reset_ssc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*ctx);</highlight></codeline>
<codeline lineno="609"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__sm_1gacc8beba0a4e3ae9448ea3256cb5e4341" kindref="member">EAC_set_ssc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ssc);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal">BUF_MEM<sp/>*</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><ref refid="group__sm_1ga56be34fb57fd13db3be27161c21ecccc" kindref="member">EAC_encrypt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BUF_MEM<sp/>*data);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal">BUF_MEM<sp/>*</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><ref refid="group__sm_1ga0582a6acf2cc8c435f9bf54f0b750258" kindref="member">EAC_decrypt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BUF_MEM<sp/>*data);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal">BUF_MEM<sp/>*</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><ref refid="group__sm_1ga81da2809a9490aa81825e2f3257d08ae" kindref="member">EAC_authenticate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BUF_MEM<sp/>*data);</highlight></codeline>
<codeline lineno="658"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><ref refid="group__sm_1ga50467cdf67ae44a53f86a583fc19797d" kindref="member">EAC_verify_authentication</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BUF_MEM<sp/>*data,</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BUF_MEM<sp/>*mac);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal">BUF_MEM<sp/>*</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><ref refid="group__sm_1gab211f297f88ae57ce11588f8754c9c8c" kindref="member">EAC_Comp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BUF_MEM<sp/>*pub);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal">BUF_MEM<sp/>*</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><ref refid="group__sm_1ga9ebe2d91e1c9270c7d13443100fcd524" kindref="member">EAC_hash_certificate_description</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cert_desc,</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cert_desc_len);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="690" refid="group__sm_1ga8e32964b13fe40c85d644478670ce4f3" refkind="member"><highlight class="preprocessor">#define<sp/>EAC_ID_PACE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692" refid="group__sm_1ga2c64f021a1496f58534fa6b7e15eb9a3" refkind="member"><highlight class="preprocessor">#define<sp/>EAC_ID_CA<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694" refid="group__sm_1ga2f47124dcb3bd045fc9b27db1321ebec" refkind="member"><highlight class="preprocessor">#define<sp/>EAC_ID_TA<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696" refid="group__sm_1ga3ac240a813e152822fed35fbdceacddf" refkind="member"><highlight class="preprocessor">#define<sp/>EAC_ID_EAC<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><ref refid="group__sm_1ga5df516d484102e4315a1712be8f8a656" kindref="member">EAC_CTX_set_encryption_ctx</ref>(<ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__printing_1ga69dfa847f834d5cfa559a88ceb8d04c8" kindref="member">EAC_CTX_print_private</ref>(BIO<sp/>*out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structeac__ctx" kindref="compound">EAC_CTX</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent);</highlight></codeline>
<codeline lineno="737"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__printing_1ga7bd156b63fc10e59fddb4d9fbe6f2f5c" kindref="member">BUF_MEM_print</ref>(BIO<sp/>*out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BUF_MEM<sp/>*buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><ref refid="group__printing_1ga2ed7b3ca7230dc0d6f66e64a72257ff2" kindref="member">BUF_MEM_clear_free</ref>(BUF_MEM<sp/>*b);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/fm/Dokumente/openpace/src/eac/eac.h"/>
  </compounddef>
</doxygen>
