#!/usr/bin/env python
import pace

from chat import CHAT
from pace_entity import *

TEST_CVC = "\x7F\x21\x82\x01\x41\x7F\x4E\x81\xFA\x5F\x29\x01\x00\x42\x0D\x5A\x5A\x44\x56\x43\x41\x41\x54\x41\x30\x30\x30\x33\x7F\x49\x4F\x06\x0A\x04\x00\x7F\x00\x07\x02\x02\x02\x02\x03\x86\x41\x04\x19\xD1\x75\x45\xD3\xFE\x0B\x34\x3E\x7E\xE2\xAE\x4E\x2B\xC9\x2D\x51\x35\x1C\xC1\x17\xA4\x7F\xA9\x51\x9A\xDB\x1E\x40\x5E\xE6\xB8\x12\x12\x80\xBC\xC2\xFF\xF0\x35\x7A\x19\x7D\xE7\x39\xA7\xFD\x2E\xF0\x22\x10\xEF\x34\x3C\xDB\xE7\x9E\xF9\x4B\x8E\x28\x59\x1B\xB9\x5F\x20\x0B\x5A\x5A\x44\x4B\x42\x32\x30\x30\x30\x30\x52\x7F\x4C\x12\x06\x09\x04\x00\x7F\x00\x07\x03\x01\x02\x02\x53\x05\x00\x03\x01\xDF\x04\x5F\x25\x06\x01\x00\x00\x02\x01\x07\x5F\x24\x06\x01\x00\x00\x03\x03\x01\x65\x5E\x73\x2D\x06\x09\x04\x00\x7F\x00\x07\x03\x01\x03\x01\x80\x20\x75\xE0\xC4\xAC\x36\xC2\x5A\x33\xAC\x0E\x9A\x75\xEB\x79\x2A\x72\xF3\x31\xA5\x1E\x28\x63\x4E\xCC\x2E\xD6\x2E\x54\xF3\xC6\x93\xDA\x73\x2D\x06\x09\x04\x00\x7F\x00\x07\x03\x01\x03\x02\x80\x20\x18\x12\x65\x74\x49\xFC\xF1\xD3\xDA\xD8\x3D\x13\x14\x29\x17\x5C\x61\x8B\x21\xBA\xF0\xAF\x44\xAC\xE3\x8C\xB2\xC1\x2C\xEB\x2A\x56\x5F\x37\x40\x54\x0F\x85\x09\x12\xAB\xD3\x51\xF8\xF5\x56\x9B\x53\x4A\x5C\x8F\x64\x54\x5B\x51\xA7\x34\x70\xBE\x5A\xD2\x89\xC1\x9A\x5E\x13\x52\x53\xD3\xBB\x15\x52\x26\x21\x7B\x41\xE7\xF0\x68\xB3\x52\x3F\x3A\x63\x92\x22\xAF\x2B\x62\x8C\x39\x7D\x4F\xD4\x02\x1E\xDE\x00\xDC"


TEST_DESCRIPTION = "\x30\x82\x01\x90\x06\x0A\x04\x00\x7F\x00\x07\x03\x01\x03\x01\x01\xA1\x16\x0C\x14\x42\x75\x6E\x64\x65\x73\x64\x72\x75\x63\x6B\x65\x72\x65\x69\x20\x47\x6D\x62\x48\xA2\x24\x13\x22\x68\x74\x74\x70\x3A\x2F\x2F\x77\x77\x77\x2E\x62\x75\x6E\x64\x65\x73\x64\x72\x75\x63\x6B\x65\x72\x65\x69\x2E\x64\x65\x2F\x64\x76\x63\x61\xA3\x18\x0C\x16\x44\x65\x75\x74\x73\x63\x68\x65\x20\x4B\x72\x65\x64\x69\x74\x62\x61\x6E\x6B\x20\x41\x47\xA4\x13\x13\x11\x68\x74\x74\x70\x3A\x2F\x2F\x77\x77\x77\x2E\x64\x6B\x62\x2E\x64\x65\xA5\x82\x01\x13\x0C\x82\x01\x0F\x54\x61\x75\x62\x65\x6E\x73\x74\x72\x2E\x20\x37\x2D\x39\x0D\x0A\x31\x30\x31\x31\x37\x20\x42\x65\x72\x6C\x69\x6E\x0D\x0A\x69\x6E\x66\x6F\x40\x64\x6B\x62\x2E\x64\x65\x0D\x0A\x45\x72\xC3\xB6\x66\x66\x6E\x75\x6E\x67\x20\x65\x69\x6E\x65\x73\x20\x4B\x6F\x6E\x74\x6F\x73\x0D\x0A\x42\x65\x72\x6C\x69\x6E\x65\x72\x20\x42\x65\x61\x75\x66\x74\x72\x61\x67\x74\x65\x72\x20\x66\xC3\xBC\x72\x20\x44\x61\x74\x65\x6E\x73\x63\x68\x75\x74\x7A\x20\x75\x6E\x64\x20\x49\x6E\x66\x6F\x72\x6D\x61\x74\x69\x6F\x6E\x73\x66\x72\x65\x69\x68\x65\x69\x74\x2C\x20\x41\x6E\x20\x64\x65\x72\x20\x55\x72\x61\x6E\x69\x61\x20\x34\x2D\x31\x30\x2C\x20\x31\x30\x37\x38\x37\x20\x42\x65\x72\x6C\x69\x6E\x2C\x20\x30\x33\x30\x2F\x31\x33\x20\x38\x38\x39\x2D\x30\x2C\x20\x6D\x61\x69\x6C\x62\x6F\x78\x40\x64\x61\x74\x65\x6E\x73\x63\x68\x75\x74\x7A\x2D\x62\x65\x72\x6C\x69\x6E\x2E\x64\x65\x2C\x20\x68\x74\x74\x70\x3A\x2F\x2F\x77\x77\x77\x2E\x64\x61\x74\x65\x6E\x73\x63\x68\x75\x74\x7A\x2D\x62\x65\x72\x6C\x69\x6E\x2E\x64\x65\x0D\x0A\x45\x72\xC3\xB6\x66\x66\x6E\x75\x6E\x67\x20\x65\x69\x6E\x65\x73\x20\x4B\x6F\x6E\x74\x6F\x73\x0D\x0A"

CVCA = "\x7f\x21\x82\x02\xf3\x7f\x4e\x82\x02\x6a\x5f\x29\x01\x00\x42\x0d\x44\x45\x43\x56\x43\x41\x41\x54\x30\x30\x30\x30\x31\x7f\x49\x82\x02\x1f\x06\x0a\x04\x00\x7f\x00\x07\x02\x02\x02\x02\x05\x81\x40\xaa\xdd\x9d\xb8\xdb\xe9\xc4\x8b\x3f\xd4\xe6\xae\x33\xc9\xfc\x07\xcb\x30\x8d\xb3\xb3\xc9\xd2\x0e\xd6\x63\x9c\xca\x70\x33\x08\x71\x7d\x4d\x9b\x00\x9b\xc6\x68\x42\xae\xcd\xa1\x2a\xe6\xa3\x80\xe6\x28\x81\xff\x2f\x2d\x82\xc6\x85\x28\xaa\x60\x56\x58\x3a\x48\xf3\x82\x40\x78\x30\xa3\x31\x8b\x60\x3b\x89\xe2\x32\x71\x45\xac\x23\x4c\xc5\x94\xcb\xdd\x8d\x3d\xf9\x16\x10\xa8\x34\x41\xca\xea\x98\x63\xbc\x2d\xed\x5d\x5a\xa8\x25\x3a\xa1\x0a\x2e\xf1\xc9\x8b\x9a\xc8\xb5\x7f\x11\x17\xa7\x2b\xf2\xc7\xb9\xe7\xc1\xac\x4d\x77\xfc\x94\xca\x83\x40\x3d\xf9\x16\x10\xa8\x34\x41\xca\xea\x98\x63\xbc\x2d\xed\x5d\x5a\xa8\x25\x3a\xa1\x0a\x2e\xf1\xc9\x8b\x9a\xc8\xb5\x7f\x11\x17\xa7\x2b\xf2\xc7\xb9\xe7\xc1\xac\x4d\x77\xfc\x94\xca\xdc\x08\x3e\x67\x98\x40\x50\xb7\x5e\xba\xe5\xdd\x28\x09\xbd\x63\x80\x16\xf7\x23\x84\x81\x81\x04\x81\xae\xe4\xbd\xd8\x2e\xd9\x64\x5a\x21\x32\x2e\x9c\x4c\x6a\x93\x85\xed\x9f\x70\xb5\xd9\x16\xc1\xb4\x3b\x62\xee\xf4\xd0\x09\x8e\xff\x3b\x1f\x78\xe2\xd0\xd4\x8d\x50\xd1\x68\x7b\x93\xb9\x7d\x5f\x7c\x6d\x50\x47\x40\x6a\x5e\x68\x8b\x35\x22\x09\xbc\xb9\xf8\x22\x7d\xde\x38\x5d\x56\x63\x32\xec\xc0\xea\xbf\xa9\xcf\x78\x22\xfd\xf2\x09\xf7\x00\x24\xa5\x7b\x1a\xa0\x00\xc5\x5b\x88\x1f\x81\x11\xb2\xdc\xde\x49\x4a\x5f\x48\x5e\x5b\xca\x4b\xd8\x8a\x27\x63\xae\xd1\xca\x2b\x2f\xa8\xf0\x54\x06\x78\xcd\x1e\x0f\x3a\xd8\x08\x92\x85\x40\xaa\xdd\x9d\xb8\xdb\xe9\xc4\x8b\x3f\xd4\xe6\xae\x33\xc9\xfc\x07\xcb\x30\x8d\xb3\xb3\xc9\xd2\x0e\xd6\x63\x9c\xca\x70\x33\x08\x70\x55\x3e\x5c\x41\x4c\xa9\x26\x19\x41\x86\x61\x19\x7f\xac\x10\x47\x1d\xb1\xd3\x81\x08\x5d\xda\xdd\xb5\x87\x96\x82\x9c\xa9\x00\x69\x86\x81\x81\x04\x64\xf0\x9c\x61\x7c\x0d\x5a\x4e\x2e\x88\xb2\x59\x8a\xf0\x68\x60\x44\x0c\x07\xc5\xed\x35\x3a\x18\xa1\x4e\x93\x8a\x6c\xbc\xe3\x05\x94\xd9\x40\x79\x59\x4c\xcf\xae\xfe\x28\xd9\xaa\xc9\xac\x1b\xd3\x7c\x89\xb6\xcc\xbd\x10\xb1\x4f\xc3\xaa\x19\xde\xb1\xfd\x03\xea\x15\x1a\x42\xb8\x92\x54\x7a\x33\x96\x18\xc4\xc9\xf2\x6f\xa9\x83\x85\x5d\x89\x3f\x81\x41\x3c\xd3\x20\xea\x42\x30\xd3\x41\x5e\xbc\xcd\xb5\x90\x8d\x91\xdc\x23\xc6\x56\x6f\x47\xb8\xa0\xe0\xa1\x9c\x17\x5b\xdc\x77\x5d\x88\x24\x67\x6a\xac\xfa\xed\xea\x0c\x16\x0e\x87\x01\x01\x5f\x20\x0d\x44\x45\x43\x56\x43\x41\x41\x54\x30\x30\x30\x30\x31\x7f\x4c\x0e\x06\x09\x04\x00\x7f\x00\x07\x03\x01\x02\x01\x53\x01\xc3\x5f\x25\x06\x01\x00\x00\x09\x03\x00\x5f\x24\x06\x01\x01\x00\x09\x02\x05\x5f\x37\x81\x80\xa5\xe7\x22\x44\xd0\xac\x9c\xd3\xe8\xfe\x9b\x87\x8e\xa3\x2a\x24\xf4\xaa\x06\x0f\xd1\x7c\x2a\x82\x91\xd9\x79\x7e\x8a\x60\xf2\x8a\x29\x78\xe3\xf4\xea\xe8\x40\xe9\x5b\x6a\x64\xfd\xa4\x4d\x8d\x39\xa6\x99\x52\x1c\xd5\x38\x22\x03\x96\x49\x45\x15\x0a\x6c\xc4\xa5\x0c\x49\xee\x23\x4a\xb3\x6d\xf6\x75\xe4\x4c\x11\x49\x90\x80\x67\x6d\xd5\xb3\xac\x18\x59\xd9\x8b\x30\x2c\xa9\x60\x5c\xd9\x4a\x51\xd7\xda\x57\x38\xbe\xaa\x49\x84\x8b\xca\x77\x77\xb7\xdc\x9a\xcc\xda\xa1\xd0\xb6\x44\x32\xb2\xc1\x38\x89\xa4\x85\x4c\x9f\xf3\x46"

def pacetest():
    picc = PICC("123456")
    pcd = PCD("123456")

    enc_nonce = picc.generate_nonce()
    pcd.decrypt_nonce(enc_nonce)
    picc_pub = picc.get_static_pubkey()
    pcd_pub = pcd.get_static_pubkey()
    picc.perform_mapping(pcd_pub)
    pcd.perform_mapping(picc_pub)
    picc_eph_pub = picc.generate_ephemeral_pubkey()
    pcd_eph_pub = pcd.generate_ephemeral_pubkey()
    picc.compute_shared_secret(pcd_eph_pub)
    pcd.compute_shared_secret(picc_eph_pub)
    picc.derive_keys()
    pcd.derive_keys()
    token_pcd = pcd.get_authentication_token()

    print(picc)
    print(pcd)

    picc.EAC_CTX_set_encryption_ctx()
    ENCRYPTION_TEST = "TESTTESTTESTTEST"
    encrypted = picc.encrypt(ENCRYPTION_TEST)

    decrypted = pcd.decrypt(encrypted)
    if (decrypted != ENCRYPTION_TEST):
        raise PACEException("Failed to decrypt test data")

    mac = picc.authenticate(ENCRYPTION_TEST)
    if (not mac):
        raise PACEException("Failed to authenticate testdata")

    id_picc = picc.EAC_Comp()

    if (picc.verify_authentication_token(token_pcd) == 1):
        print("PACE run was successful")
    else:
        print("An error occured")

def cvctest():
    cvc = pace.CVC_d2i_CVC_CERT(TEST_CVC)
    cvc_desc = pace.d2i_CVC_CERTIFICATE_DESCRIPTION(TEST_DESCRIPTION)
    chat = pace.cvc_get_chat(cvc)
    pace.cvc_chat_print(chat, 4)

    asn1_chat="\x7F\x4C\x12\x06\x09\x04\x00\x7F\x00\x07\x03\x01\x02\x02\x53\x05\x00\x01\x01\x98\x04"

    chat = CHAT(asn1_chat)
    print(chat)
    print(chat.get_role())
    print(chat.get_terminal_type())
    print(chat.get_relative_authorizations())
    pace.CVC_CERT_free(cvc)
    pace.CVC_CERTIFICATE_DESCRIPTION_free(cvc_desc)

def tatest():
    ta = PACEEntity("123456")

    if pace.EAC_CTX_init_ca(ta.ctx, pace.id_CA_ECDH_AES_CBC_CMAC_128, 11, None, None) == 0:
        raise PACEException("Failed to initialize context", "Chip Authentication", "PICC")

    if pace.EAC_CTX_init_ta(ta.ctx, None, CVCA, None) == 0:
        raise PACEException("Failed to initialize context", "Terminal Authentication", "PICC")

    pace.TA_STEP2_import_certificate(ta.ctx, TEST_CVC)

    nonce = pace.TA_STEP4_get_nonce(ta.ctx)
    if nonce is None:
        raise PACEException("Failed to generate nonce", "Terminal Authentication", "PICC")

def oidtest():
    print(pace.OBJ_txt2nid("id-CA-ECDH-AES-CBC-CMAC-128"))
    print(pace.id_CA_ECDH_AES_CBC_CMAC_128)
    assert(pace.OBJ_txt2nid("id-CA-ECDH-AES-CBC-CMAC-128") == pace.id_CA_ECDH_AES_CBC_CMAC_128)

if __name__ == "__main__":
    pacetest()
    cvctest()
    tatest()
    oidtest()
